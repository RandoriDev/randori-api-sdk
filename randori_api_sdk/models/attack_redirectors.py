# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AttackRedirectors(BaseModel):
    """
    AttackRedirectors
    """ # noqa: E501
    bart_id: StrictStr
    created_on: datetime
    deleted: StrictBool
    external_ip: StrictStr
    external_ip_str: StrictStr
    id: Optional[StrictStr] = None
    org_id: StrictStr
    remote_row_id: StrictInt
    retired: Optional[datetime] = None
    status: StrictStr
    updated_on: Optional[datetime] = None
    usage: List[StrictStr]
    __properties: ClassVar[List[str]] = ["bart_id", "created_on", "deleted", "external_ip", "external_ip_str", "id", "org_id", "remote_row_id", "retired", "status", "updated_on", "usage"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AttackRedirectors from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if retired (nullable) is None
        # and model_fields_set contains the field
        if self.retired is None and "retired" in self.model_fields_set:
            _dict['retired'] = None

        # set to None if updated_on (nullable) is None
        # and model_fields_set contains the field
        if self.updated_on is None and "updated_on" in self.model_fields_set:
            _dict['updated_on'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AttackRedirectors from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bart_id": obj.get("bart_id"),
            "created_on": obj.get("created_on"),
            "deleted": obj.get("deleted"),
            "external_ip": obj.get("external_ip"),
            "external_ip_str": obj.get("external_ip_str"),
            "id": obj.get("id"),
            "org_id": obj.get("org_id"),
            "remote_row_id": obj.get("remote_row_id"),
            "retired": obj.get("retired"),
            "status": obj.get("status"),
            "updated_on": obj.get("updated_on"),
            "usage": obj.get("usage")
        })
        return _obj


