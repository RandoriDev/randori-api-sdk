# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Service(BaseModel):
    """
    Service
    """ # noqa: E501
    applicability: Optional[StrictInt] = None
    attack_note: Optional[StrictStr] = None
    confidence: Optional[StrictInt] = None
    cpe: Optional[Dict[str, Any]] = None
    criticality: Optional[StrictInt] = None
    deleted: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    description_source: Optional[StrictStr] = None
    enumerability: Optional[StrictInt] = None
    exploitability: Optional[StrictInt] = None
    first_seen: Optional[datetime] = None
    id: StrictStr
    instance_count: Optional[Union[StrictFloat, StrictInt]] = None
    ip_count: Optional[Union[StrictFloat, StrictInt]] = None
    last_seen: Optional[datetime] = None
    lens_id: Optional[StrictStr] = None
    lens_view: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    org_id: StrictStr
    perspective: Optional[StrictStr] = None
    perspective_name: Optional[StrictStr] = None
    post_exploit: Optional[StrictInt] = None
    private_weakness: Optional[StrictInt] = None
    public_weakness: Optional[StrictInt] = None
    randori_notes: Optional[StrictStr] = None
    reference: Optional[StrictStr] = None
    research: Optional[StrictInt] = None
    service_id: Optional[StrictStr] = None
    target_temptation: Optional[StrictInt] = None
    tech_category: Optional[List[StrictStr]] = None
    temptation_last_modified: Optional[datetime] = None
    vendor: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["applicability", "attack_note", "confidence", "cpe", "criticality", "deleted", "description", "description_source", "enumerability", "exploitability", "first_seen", "id", "instance_count", "ip_count", "last_seen", "lens_id", "lens_view", "name", "org_id", "perspective", "perspective_name", "post_exploit", "private_weakness", "public_weakness", "randori_notes", "reference", "research", "service_id", "target_temptation", "tech_category", "temptation_last_modified", "vendor", "version"]

    @field_validator('description_source')
    def description_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('default', 'ai'):
            raise ValueError("must be one of enum values ('default', 'ai')")
        return value

    @field_validator('tech_category')
    def tech_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('App Servers', 'Applications', 'Databases', 'Firewalls', 'IoT', 'Load Balancers', 'Storage Devices', 'VPNs', 'Web Servers', 'Operating Systems', 'Network Services', 'Plugins', 'Network Equipment'):
                raise ValueError("each list item must be one of ('App Servers', 'Applications', 'Databases', 'Firewalls', 'IoT', 'Load Balancers', 'Storage Devices', 'VPNs', 'Web Servers', 'Operating Systems', 'Network Services', 'Plugins', 'Network Equipment')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Service from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Service from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicability": obj.get("applicability"),
            "attack_note": obj.get("attack_note"),
            "confidence": obj.get("confidence"),
            "cpe": obj.get("cpe"),
            "criticality": obj.get("criticality"),
            "deleted": obj.get("deleted"),
            "description": obj.get("description"),
            "description_source": obj.get("description_source"),
            "enumerability": obj.get("enumerability"),
            "exploitability": obj.get("exploitability"),
            "first_seen": obj.get("first_seen"),
            "id": obj.get("id"),
            "instance_count": obj.get("instance_count"),
            "ip_count": obj.get("ip_count"),
            "last_seen": obj.get("last_seen"),
            "lens_id": obj.get("lens_id"),
            "lens_view": obj.get("lens_view"),
            "name": obj.get("name"),
            "org_id": obj.get("org_id"),
            "perspective": obj.get("perspective"),
            "perspective_name": obj.get("perspective_name"),
            "post_exploit": obj.get("post_exploit"),
            "private_weakness": obj.get("private_weakness"),
            "public_weakness": obj.get("public_weakness"),
            "randori_notes": obj.get("randori_notes"),
            "reference": obj.get("reference"),
            "research": obj.get("research"),
            "service_id": obj.get("service_id"),
            "target_temptation": obj.get("target_temptation"),
            "tech_category": obj.get("tech_category"),
            "temptation_last_modified": obj.get("temptation_last_modified"),
            "vendor": obj.get("vendor"),
            "version": obj.get("version")
        })
        return _obj


