# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    created_on: Optional[datetime] = None
    email: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    last_login: Optional[datetime] = None
    lock_expiry: Optional[datetime] = None
    lock_reason: Optional[Annotated[str, Field(strict=True, max_length=512)]] = None
    locked: Optional[StrictBool] = None
    login_type: Optional[Annotated[str, Field(strict=True, max_length=13)]] = None
    managed_personnel: Optional[StrictBool] = None
    name: Optional[Annotated[str, Field(strict=True)]] = None
    password_failures: Optional[StrictInt] = None
    title: Optional[Annotated[str, Field(strict=True)]] = None
    tos_date: Optional[datetime] = None
    tos_version: Optional[StrictInt] = None
    totp_failures: Optional[StrictInt] = None
    username: Optional[Annotated[str, Field(strict=True)]] = None
    view_org: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["created_on", "email", "id", "last_login", "lock_expiry", "lock_reason", "locked", "login_type", "managed_personnel", "name", "password_failures", "title", "tos_date", "tos_version", "totp_failures", "username", "view_org"]

    @field_validator('login_type')
    def login_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('invalid', 'developer_jwt', 'password_totp'):
            raise ValueError("must be one of enum values ('invalid', 'developer_jwt', 'password_totp')")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\\@#$%ˆ&*(){}|~<>;:[\]`]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[^\\@#$%ˆ&*(){}|~<>;:[\]`]{1,80}$/")
        return value

    @field_validator('title')
    def title_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\\@#$%ˆ*(){}|~<>;:[\]`]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[^\\@#$%ˆ*(){}|~<>;:[\]`]{1,80}$/")
        return value

    @field_validator('username')
    def username_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[\w@.\d_+-]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[\w@.\d_+-]{1,80}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if created_on (nullable) is None
        # and model_fields_set contains the field
        if self.created_on is None and "created_on" in self.model_fields_set:
            _dict['created_on'] = None

        # set to None if last_login (nullable) is None
        # and model_fields_set contains the field
        if self.last_login is None and "last_login" in self.model_fields_set:
            _dict['last_login'] = None

        # set to None if lock_expiry (nullable) is None
        # and model_fields_set contains the field
        if self.lock_expiry is None and "lock_expiry" in self.model_fields_set:
            _dict['lock_expiry'] = None

        # set to None if lock_reason (nullable) is None
        # and model_fields_set contains the field
        if self.lock_reason is None and "lock_reason" in self.model_fields_set:
            _dict['lock_reason'] = None

        # set to None if locked (nullable) is None
        # and model_fields_set contains the field
        if self.locked is None and "locked" in self.model_fields_set:
            _dict['locked'] = None

        # set to None if login_type (nullable) is None
        # and model_fields_set contains the field
        if self.login_type is None and "login_type" in self.model_fields_set:
            _dict['login_type'] = None

        # set to None if managed_personnel (nullable) is None
        # and model_fields_set contains the field
        if self.managed_personnel is None and "managed_personnel" in self.model_fields_set:
            _dict['managed_personnel'] = None

        # set to None if password_failures (nullable) is None
        # and model_fields_set contains the field
        if self.password_failures is None and "password_failures" in self.model_fields_set:
            _dict['password_failures'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if totp_failures (nullable) is None
        # and model_fields_set contains the field
        if self.totp_failures is None and "totp_failures" in self.model_fields_set:
            _dict['totp_failures'] = None

        # set to None if view_org (nullable) is None
        # and model_fields_set contains the field
        if self.view_org is None and "view_org" in self.model_fields_set:
            _dict['view_org'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_on": obj.get("created_on"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "last_login": obj.get("last_login"),
            "lock_expiry": obj.get("lock_expiry"),
            "lock_reason": obj.get("lock_reason"),
            "locked": obj.get("locked"),
            "login_type": obj.get("login_type"),
            "managed_personnel": obj.get("managed_personnel"),
            "name": obj.get("name"),
            "password_failures": obj.get("password_failures"),
            "title": obj.get("title"),
            "tos_date": obj.get("tos_date"),
            "tos_version": obj.get("tos_version"),
            "totp_failures": obj.get("totp_failures"),
            "username": obj.get("username"),
            "view_org": obj.get("view_org")
        })
        return _obj


