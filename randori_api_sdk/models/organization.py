# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Organization(BaseModel):
    """
    Organization
    """ # noqa: E501
    address: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    allowed_email_domains: Optional[List[StrictStr]] = None
    contact: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    created_on: Optional[datetime] = None
    id: Optional[StrictStr] = None
    license_level: Optional[Any] = Field(default=None, description="License tier for the organization")
    login_methods: Optional[List[StrictStr]] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    paying: Optional[StrictBool] = None
    platform_subscription_id: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    shortname: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    sso_path: Optional[StrictStr] = Field(default=None, description="If SSO is enabled, is a unique login link")
    stasis: Optional[StrictBool] = None
    stasis_last_update_by: Optional[StrictStr] = None
    stasis_last_update_on: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["address", "allowed_email_domains", "contact", "created_on", "id", "license_level", "login_methods", "name", "paying", "platform_subscription_id", "shortname", "sso_path", "stasis", "stasis_last_update_by", "stasis_last_update_on"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if contact (nullable) is None
        # and model_fields_set contains the field
        if self.contact is None and "contact" in self.model_fields_set:
            _dict['contact'] = None

        # set to None if created_on (nullable) is None
        # and model_fields_set contains the field
        if self.created_on is None and "created_on" in self.model_fields_set:
            _dict['created_on'] = None

        # set to None if license_level (nullable) is None
        # and model_fields_set contains the field
        if self.license_level is None and "license_level" in self.model_fields_set:
            _dict['license_level'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if platform_subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.platform_subscription_id is None and "platform_subscription_id" in self.model_fields_set:
            _dict['platform_subscription_id'] = None

        # set to None if shortname (nullable) is None
        # and model_fields_set contains the field
        if self.shortname is None and "shortname" in self.model_fields_set:
            _dict['shortname'] = None

        # set to None if stasis_last_update_by (nullable) is None
        # and model_fields_set contains the field
        if self.stasis_last_update_by is None and "stasis_last_update_by" in self.model_fields_set:
            _dict['stasis_last_update_by'] = None

        # set to None if stasis_last_update_on (nullable) is None
        # and model_fields_set contains the field
        if self.stasis_last_update_on is None and "stasis_last_update_on" in self.model_fields_set:
            _dict['stasis_last_update_on'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "allowed_email_domains": obj.get("allowed_email_domains"),
            "contact": obj.get("contact"),
            "created_on": obj.get("created_on"),
            "id": obj.get("id"),
            "license_level": obj.get("license_level"),
            "login_methods": obj.get("login_methods"),
            "name": obj.get("name"),
            "paying": obj.get("paying"),
            "platform_subscription_id": obj.get("platform_subscription_id"),
            "shortname": obj.get("shortname"),
            "sso_path": obj.get("sso_path"),
            "stasis": obj.get("stasis"),
            "stasis_last_update_by": obj.get("stasis_last_update_by"),
            "stasis_last_update_on": obj.get("stasis_last_update_on")
        })
        return _obj


