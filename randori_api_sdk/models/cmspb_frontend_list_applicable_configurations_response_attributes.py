# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from randori_api_sdk.models.cmspb_frontend_list_applicable_configurations_response_trigger_criteria import CmspbFrontendListApplicableConfigurationsResponseTriggerCriteria
from randori_api_sdk.models.timestamppb_timestamp import TimestamppbTimestamp
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CmspbFrontendListApplicableConfigurationsResponseAttributes(BaseModel):
    """
    CmspbFrontendListApplicableConfigurationsResponseAttributes
    """ # noqa: E501
    configuration_id: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    last_planned_at: Optional[TimestamppbTimestamp] = None
    name: Optional[StrictStr] = None
    needs_authorization: Optional[StrictBool] = None
    period: Optional[StrictInt] = None
    required_authorization: Optional[StrictInt] = None
    stability: Optional[StrictInt] = None
    stealth: Optional[StrictInt] = None
    trigger_criteria: Optional[List[CmspbFrontendListApplicableConfigurationsResponseTriggerCriteria]] = None
    __properties: ClassVar[List[str]] = ["configuration_id", "description", "last_planned_at", "name", "needs_authorization", "period", "required_authorization", "stability", "stealth", "trigger_criteria"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CmspbFrontendListApplicableConfigurationsResponseAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_planned_at
        if self.last_planned_at:
            _dict['last_planned_at'] = self.last_planned_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_criteria (list)
        _items = []
        if self.trigger_criteria:
            for _item in self.trigger_criteria:
                if _item:
                    _items.append(_item.to_dict())
            _dict['trigger_criteria'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CmspbFrontendListApplicableConfigurationsResponseAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configuration_id": obj.get("configuration_id"),
            "description": obj.get("description"),
            "last_planned_at": TimestamppbTimestamp.from_dict(obj.get("last_planned_at")) if obj.get("last_planned_at") is not None else None,
            "name": obj.get("name"),
            "needs_authorization": obj.get("needs_authorization"),
            "period": obj.get("period"),
            "required_authorization": obj.get("required_authorization"),
            "stability": obj.get("stability"),
            "stealth": obj.get("stealth"),
            "trigger_criteria": [CmspbFrontendListApplicableConfigurationsResponseTriggerCriteria.from_dict(_item) for _item in obj.get("trigger_criteria")] if obj.get("trigger_criteria") is not None else None
        })
        return _obj


