# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AttackImplants(BaseModel):
    """
    AttackImplants
    """ # noqa: E501
    arch: StrictStr
    bart_id: StrictStr
    bits: Optional[StrictInt] = None
    created_on: datetime
    host_ips: Optional[List[StrictStr]] = None
    hostnames: List[StrictStr]
    id: Optional[StrictStr] = None
    last_checkin: datetime
    method: Dict[str, Any]
    next_checkin: datetime
    nick: Optional[StrictStr] = None
    org_id: StrictStr
    os: Optional[StrictStr] = None
    ostype: Optional[StrictStr] = None
    osver: Optional[StrictStr] = None
    status: StrictStr
    uid: StrictStr
    __properties: ClassVar[List[str]] = ["arch", "bart_id", "bits", "created_on", "host_ips", "hostnames", "id", "last_checkin", "method", "next_checkin", "nick", "org_id", "os", "ostype", "osver", "status", "uid"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AttackImplants from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if bits (nullable) is None
        # and model_fields_set contains the field
        if self.bits is None and "bits" in self.model_fields_set:
            _dict['bits'] = None

        # set to None if nick (nullable) is None
        # and model_fields_set contains the field
        if self.nick is None and "nick" in self.model_fields_set:
            _dict['nick'] = None

        # set to None if os (nullable) is None
        # and model_fields_set contains the field
        if self.os is None and "os" in self.model_fields_set:
            _dict['os'] = None

        # set to None if ostype (nullable) is None
        # and model_fields_set contains the field
        if self.ostype is None and "ostype" in self.model_fields_set:
            _dict['ostype'] = None

        # set to None if osver (nullable) is None
        # and model_fields_set contains the field
        if self.osver is None and "osver" in self.model_fields_set:
            _dict['osver'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AttackImplants from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arch": obj.get("arch"),
            "bart_id": obj.get("bart_id"),
            "bits": obj.get("bits"),
            "created_on": obj.get("created_on"),
            "host_ips": obj.get("host_ips"),
            "hostnames": obj.get("hostnames"),
            "id": obj.get("id"),
            "last_checkin": obj.get("last_checkin"),
            "method": obj.get("method"),
            "next_checkin": obj.get("next_checkin"),
            "nick": obj.get("nick"),
            "org_id": obj.get("org_id"),
            "os": obj.get("os"),
            "ostype": obj.get("ostype"),
            "osver": obj.get("osver"),
            "status": obj.get("status"),
            "uid": obj.get("uid")
        })
        return _obj


