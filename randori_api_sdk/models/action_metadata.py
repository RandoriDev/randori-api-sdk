# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ActionMetadata(BaseModel):
    """
    ActionMetadata
    """ # noqa: E501
    action_id: StrictStr
    artifacts_status: Optional[StrictStr] = None
    bart_id: StrictStr
    completed: Optional[datetime] = None
    config_hash: Optional[StrictStr] = None
    created: Optional[datetime] = None
    deleted: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    description_id: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    dst_email: Optional[List[StrictStr]] = None
    dst_host: Optional[List[StrictStr]] = None
    dst_ip: Optional[List[StrictStr]] = None
    dst_mac: Optional[List[StrictStr]] = None
    dst_misc: Optional[List[StrictStr]] = None
    dst_network: Optional[List[StrictStr]] = None
    dst_path: Optional[List[StrictStr]] = None
    dst_port: Optional[List[StrictInt]] = None
    id: StrictStr
    implant_id: Optional[StrictStr] = None
    implant_nick: Optional[StrictStr] = None
    implant_uid: Optional[StrictStr] = None
    mitre_techniques: Optional[List[StrictStr]] = None
    name: Optional[StrictStr] = None
    org_id: StrictStr
    perspective_metadata: Optional[Dict[str, Any]] = None
    randori_notes: Optional[StrictStr] = None
    result: StrictStr
    result_hash: Optional[StrictStr] = None
    runbook_instance_id: StrictStr
    src_email: Optional[List[StrictStr]] = None
    src_host: Optional[List[StrictStr]] = None
    src_ip: Optional[List[StrictStr]] = None
    src_mac: Optional[List[StrictStr]] = None
    src_misc: Optional[List[StrictStr]] = None
    stability: Optional[StrictInt] = None
    started: Optional[datetime] = None
    stealth: Optional[StrictInt] = None
    summary_sha: Optional[StrictStr] = None
    template: Optional[StrictStr] = None
    trigger: Optional[Dict[str, Any]] = None
    updated: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["action_id", "artifacts_status", "bart_id", "completed", "config_hash", "created", "deleted", "description", "description_id", "display_name", "dst_email", "dst_host", "dst_ip", "dst_mac", "dst_misc", "dst_network", "dst_path", "dst_port", "id", "implant_id", "implant_nick", "implant_uid", "mitre_techniques", "name", "org_id", "perspective_metadata", "randori_notes", "result", "result_hash", "runbook_instance_id", "src_email", "src_host", "src_ip", "src_mac", "src_misc", "stability", "started", "stealth", "summary_sha", "template", "trigger", "updated"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ActionMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if artifacts_status (nullable) is None
        # and model_fields_set contains the field
        if self.artifacts_status is None and "artifacts_status" in self.model_fields_set:
            _dict['artifacts_status'] = None

        # set to None if completed (nullable) is None
        # and model_fields_set contains the field
        if self.completed is None and "completed" in self.model_fields_set:
            _dict['completed'] = None

        # set to None if config_hash (nullable) is None
        # and model_fields_set contains the field
        if self.config_hash is None and "config_hash" in self.model_fields_set:
            _dict['config_hash'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if deleted (nullable) is None
        # and model_fields_set contains the field
        if self.deleted is None and "deleted" in self.model_fields_set:
            _dict['deleted'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if description_id (nullable) is None
        # and model_fields_set contains the field
        if self.description_id is None and "description_id" in self.model_fields_set:
            _dict['description_id'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['display_name'] = None

        # set to None if dst_email (nullable) is None
        # and model_fields_set contains the field
        if self.dst_email is None and "dst_email" in self.model_fields_set:
            _dict['dst_email'] = None

        # set to None if dst_host (nullable) is None
        # and model_fields_set contains the field
        if self.dst_host is None and "dst_host" in self.model_fields_set:
            _dict['dst_host'] = None

        # set to None if dst_ip (nullable) is None
        # and model_fields_set contains the field
        if self.dst_ip is None and "dst_ip" in self.model_fields_set:
            _dict['dst_ip'] = None

        # set to None if dst_mac (nullable) is None
        # and model_fields_set contains the field
        if self.dst_mac is None and "dst_mac" in self.model_fields_set:
            _dict['dst_mac'] = None

        # set to None if dst_misc (nullable) is None
        # and model_fields_set contains the field
        if self.dst_misc is None and "dst_misc" in self.model_fields_set:
            _dict['dst_misc'] = None

        # set to None if dst_network (nullable) is None
        # and model_fields_set contains the field
        if self.dst_network is None and "dst_network" in self.model_fields_set:
            _dict['dst_network'] = None

        # set to None if dst_path (nullable) is None
        # and model_fields_set contains the field
        if self.dst_path is None and "dst_path" in self.model_fields_set:
            _dict['dst_path'] = None

        # set to None if dst_port (nullable) is None
        # and model_fields_set contains the field
        if self.dst_port is None and "dst_port" in self.model_fields_set:
            _dict['dst_port'] = None

        # set to None if implant_id (nullable) is None
        # and model_fields_set contains the field
        if self.implant_id is None and "implant_id" in self.model_fields_set:
            _dict['implant_id'] = None

        # set to None if implant_nick (nullable) is None
        # and model_fields_set contains the field
        if self.implant_nick is None and "implant_nick" in self.model_fields_set:
            _dict['implant_nick'] = None

        # set to None if implant_uid (nullable) is None
        # and model_fields_set contains the field
        if self.implant_uid is None and "implant_uid" in self.model_fields_set:
            _dict['implant_uid'] = None

        # set to None if mitre_techniques (nullable) is None
        # and model_fields_set contains the field
        if self.mitre_techniques is None and "mitre_techniques" in self.model_fields_set:
            _dict['mitre_techniques'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if perspective_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.perspective_metadata is None and "perspective_metadata" in self.model_fields_set:
            _dict['perspective_metadata'] = None

        # set to None if randori_notes (nullable) is None
        # and model_fields_set contains the field
        if self.randori_notes is None and "randori_notes" in self.model_fields_set:
            _dict['randori_notes'] = None

        # set to None if result_hash (nullable) is None
        # and model_fields_set contains the field
        if self.result_hash is None and "result_hash" in self.model_fields_set:
            _dict['result_hash'] = None

        # set to None if src_email (nullable) is None
        # and model_fields_set contains the field
        if self.src_email is None and "src_email" in self.model_fields_set:
            _dict['src_email'] = None

        # set to None if src_host (nullable) is None
        # and model_fields_set contains the field
        if self.src_host is None and "src_host" in self.model_fields_set:
            _dict['src_host'] = None

        # set to None if src_ip (nullable) is None
        # and model_fields_set contains the field
        if self.src_ip is None and "src_ip" in self.model_fields_set:
            _dict['src_ip'] = None

        # set to None if src_mac (nullable) is None
        # and model_fields_set contains the field
        if self.src_mac is None and "src_mac" in self.model_fields_set:
            _dict['src_mac'] = None

        # set to None if src_misc (nullable) is None
        # and model_fields_set contains the field
        if self.src_misc is None and "src_misc" in self.model_fields_set:
            _dict['src_misc'] = None

        # set to None if stability (nullable) is None
        # and model_fields_set contains the field
        if self.stability is None and "stability" in self.model_fields_set:
            _dict['stability'] = None

        # set to None if started (nullable) is None
        # and model_fields_set contains the field
        if self.started is None and "started" in self.model_fields_set:
            _dict['started'] = None

        # set to None if stealth (nullable) is None
        # and model_fields_set contains the field
        if self.stealth is None and "stealth" in self.model_fields_set:
            _dict['stealth'] = None

        # set to None if summary_sha (nullable) is None
        # and model_fields_set contains the field
        if self.summary_sha is None and "summary_sha" in self.model_fields_set:
            _dict['summary_sha'] = None

        # set to None if template (nullable) is None
        # and model_fields_set contains the field
        if self.template is None and "template" in self.model_fields_set:
            _dict['template'] = None

        # set to None if trigger (nullable) is None
        # and model_fields_set contains the field
        if self.trigger is None and "trigger" in self.model_fields_set:
            _dict['trigger'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ActionMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action_id": obj.get("action_id"),
            "artifacts_status": obj.get("artifacts_status"),
            "bart_id": obj.get("bart_id"),
            "completed": obj.get("completed"),
            "config_hash": obj.get("config_hash"),
            "created": obj.get("created"),
            "deleted": obj.get("deleted"),
            "description": obj.get("description"),
            "description_id": obj.get("description_id"),
            "display_name": obj.get("display_name"),
            "dst_email": obj.get("dst_email"),
            "dst_host": obj.get("dst_host"),
            "dst_ip": obj.get("dst_ip"),
            "dst_mac": obj.get("dst_mac"),
            "dst_misc": obj.get("dst_misc"),
            "dst_network": obj.get("dst_network"),
            "dst_path": obj.get("dst_path"),
            "dst_port": obj.get("dst_port"),
            "id": obj.get("id"),
            "implant_id": obj.get("implant_id"),
            "implant_nick": obj.get("implant_nick"),
            "implant_uid": obj.get("implant_uid"),
            "mitre_techniques": obj.get("mitre_techniques"),
            "name": obj.get("name"),
            "org_id": obj.get("org_id"),
            "perspective_metadata": obj.get("perspective_metadata"),
            "randori_notes": obj.get("randori_notes"),
            "result": obj.get("result"),
            "result_hash": obj.get("result_hash"),
            "runbook_instance_id": obj.get("runbook_instance_id"),
            "src_email": obj.get("src_email"),
            "src_host": obj.get("src_host"),
            "src_ip": obj.get("src_ip"),
            "src_mac": obj.get("src_mac"),
            "src_misc": obj.get("src_misc"),
            "stability": obj.get("stability"),
            "started": obj.get("started"),
            "stealth": obj.get("stealth"),
            "summary_sha": obj.get("summary_sha"),
            "template": obj.get("template"),
            "trigger": obj.get("trigger"),
            "updated": obj.get("updated")
        })
        return _obj


