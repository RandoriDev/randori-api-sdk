# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AttackRunbook(BaseModel):
    """
    AttackRunbook
    """ # noqa: E501
    comment: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=280)]] = None
    deleted: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    dst_email: Optional[List[StrictStr]] = None
    dst_host: Optional[List[StrictStr]] = None
    dst_ip: Optional[List[StrictStr]] = None
    dst_mac: Optional[List[StrictStr]] = None
    dst_misc: Optional[List[StrictStr]] = None
    dst_network: Optional[List[StrictStr]] = None
    dst_path: Optional[List[StrictStr]] = None
    dst_port: Optional[List[StrictInt]] = None
    dst_search: StrictStr
    end_time: Optional[datetime] = None
    guidance: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    implant_ids: Optional[List[StrictStr]] = None
    implant_nick: Optional[StrictStr] = None
    implant_src_host: Optional[List[StrictStr]] = None
    implant_src_ip: Optional[List[StrictStr]] = None
    instance_label: Optional[StrictStr] = None
    name: StrictStr
    objective: Optional[StrictStr] = None
    org_id: StrictStr
    perspective_metadata: Optional[List[Dict[str, Any]]] = None
    randori_notes: Optional[StrictStr] = None
    results: Optional[StrictStr] = None
    runbook_id: StrictStr
    src_email: Optional[List[StrictStr]] = None
    src_host: Optional[List[StrictStr]] = None
    src_ip: Optional[List[StrictStr]] = None
    src_mac: Optional[List[StrictStr]] = None
    src_misc: Optional[List[StrictStr]] = None
    src_search: StrictStr
    start_time: datetime
    status: StrictStr
    technique_ids: List[StrictStr]
    trigger: Optional[List[Dict[str, Any]]] = None
    uid: StrictStr
    __properties: ClassVar[List[str]] = ["comment", "deleted", "description", "dst_email", "dst_host", "dst_ip", "dst_mac", "dst_misc", "dst_network", "dst_path", "dst_port", "dst_search", "end_time", "guidance", "id", "implant_ids", "implant_nick", "implant_src_host", "implant_src_ip", "instance_label", "name", "objective", "org_id", "perspective_metadata", "randori_notes", "results", "runbook_id", "src_email", "src_host", "src_ip", "src_mac", "src_misc", "src_search", "start_time", "status", "technique_ids", "trigger", "uid"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AttackRunbook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if deleted (nullable) is None
        # and model_fields_set contains the field
        if self.deleted is None and "deleted" in self.model_fields_set:
            _dict['deleted'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if dst_email (nullable) is None
        # and model_fields_set contains the field
        if self.dst_email is None and "dst_email" in self.model_fields_set:
            _dict['dst_email'] = None

        # set to None if dst_host (nullable) is None
        # and model_fields_set contains the field
        if self.dst_host is None and "dst_host" in self.model_fields_set:
            _dict['dst_host'] = None

        # set to None if dst_mac (nullable) is None
        # and model_fields_set contains the field
        if self.dst_mac is None and "dst_mac" in self.model_fields_set:
            _dict['dst_mac'] = None

        # set to None if dst_misc (nullable) is None
        # and model_fields_set contains the field
        if self.dst_misc is None and "dst_misc" in self.model_fields_set:
            _dict['dst_misc'] = None

        # set to None if dst_path (nullable) is None
        # and model_fields_set contains the field
        if self.dst_path is None and "dst_path" in self.model_fields_set:
            _dict['dst_path'] = None

        # set to None if dst_port (nullable) is None
        # and model_fields_set contains the field
        if self.dst_port is None and "dst_port" in self.model_fields_set:
            _dict['dst_port'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if guidance (nullable) is None
        # and model_fields_set contains the field
        if self.guidance is None and "guidance" in self.model_fields_set:
            _dict['guidance'] = None

        # set to None if implant_ids (nullable) is None
        # and model_fields_set contains the field
        if self.implant_ids is None and "implant_ids" in self.model_fields_set:
            _dict['implant_ids'] = None

        # set to None if implant_nick (nullable) is None
        # and model_fields_set contains the field
        if self.implant_nick is None and "implant_nick" in self.model_fields_set:
            _dict['implant_nick'] = None

        # set to None if implant_src_host (nullable) is None
        # and model_fields_set contains the field
        if self.implant_src_host is None and "implant_src_host" in self.model_fields_set:
            _dict['implant_src_host'] = None

        # set to None if instance_label (nullable) is None
        # and model_fields_set contains the field
        if self.instance_label is None and "instance_label" in self.model_fields_set:
            _dict['instance_label'] = None

        # set to None if objective (nullable) is None
        # and model_fields_set contains the field
        if self.objective is None and "objective" in self.model_fields_set:
            _dict['objective'] = None

        # set to None if perspective_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.perspective_metadata is None and "perspective_metadata" in self.model_fields_set:
            _dict['perspective_metadata'] = None

        # set to None if randori_notes (nullable) is None
        # and model_fields_set contains the field
        if self.randori_notes is None and "randori_notes" in self.model_fields_set:
            _dict['randori_notes'] = None

        # set to None if results (nullable) is None
        # and model_fields_set contains the field
        if self.results is None and "results" in self.model_fields_set:
            _dict['results'] = None

        # set to None if src_email (nullable) is None
        # and model_fields_set contains the field
        if self.src_email is None and "src_email" in self.model_fields_set:
            _dict['src_email'] = None

        # set to None if src_host (nullable) is None
        # and model_fields_set contains the field
        if self.src_host is None and "src_host" in self.model_fields_set:
            _dict['src_host'] = None

        # set to None if src_mac (nullable) is None
        # and model_fields_set contains the field
        if self.src_mac is None and "src_mac" in self.model_fields_set:
            _dict['src_mac'] = None

        # set to None if src_misc (nullable) is None
        # and model_fields_set contains the field
        if self.src_misc is None and "src_misc" in self.model_fields_set:
            _dict['src_misc'] = None

        # set to None if trigger (nullable) is None
        # and model_fields_set contains the field
        if self.trigger is None and "trigger" in self.model_fields_set:
            _dict['trigger'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AttackRunbook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "deleted": obj.get("deleted"),
            "description": obj.get("description"),
            "dst_email": obj.get("dst_email"),
            "dst_host": obj.get("dst_host"),
            "dst_ip": obj.get("dst_ip"),
            "dst_mac": obj.get("dst_mac"),
            "dst_misc": obj.get("dst_misc"),
            "dst_network": obj.get("dst_network"),
            "dst_path": obj.get("dst_path"),
            "dst_port": obj.get("dst_port"),
            "dst_search": obj.get("dst_search"),
            "end_time": obj.get("end_time"),
            "guidance": obj.get("guidance"),
            "id": obj.get("id"),
            "implant_ids": obj.get("implant_ids"),
            "implant_nick": obj.get("implant_nick"),
            "implant_src_host": obj.get("implant_src_host"),
            "implant_src_ip": obj.get("implant_src_ip"),
            "instance_label": obj.get("instance_label"),
            "name": obj.get("name"),
            "objective": obj.get("objective"),
            "org_id": obj.get("org_id"),
            "perspective_metadata": obj.get("perspective_metadata"),
            "randori_notes": obj.get("randori_notes"),
            "results": obj.get("results"),
            "runbook_id": obj.get("runbook_id"),
            "src_email": obj.get("src_email"),
            "src_host": obj.get("src_host"),
            "src_ip": obj.get("src_ip"),
            "src_mac": obj.get("src_mac"),
            "src_misc": obj.get("src_misc"),
            "src_search": obj.get("src_search"),
            "start_time": obj.get("start_time"),
            "status": obj.get("status"),
            "technique_ids": obj.get("technique_ids"),
            "trigger": obj.get("trigger"),
            "uid": obj.get("uid")
        })
        return _obj


