# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PortsForIp(BaseModel):
    """
    PortsForIp
    """ # noqa: E501
    confidence: Optional[StrictInt] = None
    deleted: Optional[StrictBool] = None
    id: StrictStr
    ip_id: Optional[StrictStr] = None
    last_seen: Optional[datetime] = None
    lens_id: Optional[StrictStr] = None
    lens_view: Optional[StrictStr] = None
    org_id: StrictStr
    perspective: Optional[StrictStr] = None
    perspective_name: Optional[StrictStr] = None
    port: Optional[StrictInt] = None
    protocol: Optional[StrictInt] = None
    seen_open: Optional[StrictBool] = None
    state: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["confidence", "deleted", "id", "ip_id", "last_seen", "lens_id", "lens_view", "org_id", "perspective", "perspective_name", "port", "protocol", "seen_open", "state"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PortsForIp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PortsForIp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidence": obj.get("confidence"),
            "deleted": obj.get("deleted"),
            "id": obj.get("id"),
            "ip_id": obj.get("ip_id"),
            "last_seen": obj.get("last_seen"),
            "lens_id": obj.get("lens_id"),
            "lens_view": obj.get("lens_view"),
            "org_id": obj.get("org_id"),
            "perspective": obj.get("perspective"),
            "perspective_name": obj.get("perspective_name"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "seen_open": obj.get("seen_open"),
            "state": obj.get("state")
        })
        return _obj


