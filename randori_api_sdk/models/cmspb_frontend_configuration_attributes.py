# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from randori_api_sdk.models.cmspb_frontend_configuration_access_entry import CmspbFrontendConfigurationAccessEntry
from randori_api_sdk.models.cmspb_frontend_configuration_mitre import CmspbFrontendConfigurationMitre
from randori_api_sdk.models.cmspb_frontend_configuration_objective import CmspbFrontendConfigurationObjective
from randori_api_sdk.models.cmspb_frontend_parameter_object import CmspbFrontendParameterObject
from randori_api_sdk.models.cmspb_frontend_trigger_object import CmspbFrontendTriggerObject
from randori_api_sdk.models.timestamppb_timestamp import TimestamppbTimestamp
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CmspbFrontendConfigurationAttributes(BaseModel):
    """
    CmspbFrontendConfigurationAttributes
    """ # noqa: E501
    activity_type_description: Optional[StrictStr] = None
    activity_type_name: Optional[StrictStr] = None
    authority_display: Optional[StrictBool] = None
    authority_distance_max: Optional[StrictInt] = None
    authority_distance_min: Optional[StrictInt] = None
    configuration_id: Optional[StrictStr] = None
    created: Optional[CmspbFrontendConfigurationAccessEntry] = None
    cves: Optional[List[StrictStr]] = None
    description: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    entities_count: Optional[StrictInt] = None
    last_planned_at: Optional[TimestamppbTimestamp] = None
    matching_entity_types: Optional[List[StrictStr]] = None
    mitre: Optional[CmspbFrontendConfigurationMitre] = None
    name: Optional[StrictStr] = None
    objective: Optional[CmspbFrontendConfigurationObjective] = None
    parameters: Optional[List[CmspbFrontendParameterObject]] = None
    period: Optional[StrictInt] = None
    required_authorization: Optional[StrictInt] = None
    stability: Optional[StrictInt] = None
    stealth: Optional[StrictInt] = None
    targets_count: Optional[StrictInt] = None
    trigger_criteria: Optional[List[CmspbFrontendTriggerObject]] = None
    updated: Optional[CmspbFrontendConfigurationAccessEntry] = None
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["activity_type_description", "activity_type_name", "authority_display", "authority_distance_max", "authority_distance_min", "configuration_id", "created", "cves", "description", "enabled", "entities_count", "last_planned_at", "matching_entity_types", "mitre", "name", "objective", "parameters", "period", "required_authorization", "stability", "stealth", "targets_count", "trigger_criteria", "updated", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CmspbFrontendConfigurationAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_planned_at
        if self.last_planned_at:
            _dict['last_planned_at'] = self.last_planned_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mitre
        if self.mitre:
            _dict['mitre'] = self.mitre.to_dict()
        # override the default output from pydantic by calling `to_dict()` of objective
        if self.objective:
            _dict['objective'] = self.objective.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_criteria (list)
        _items = []
        if self.trigger_criteria:
            for _item in self.trigger_criteria:
                if _item:
                    _items.append(_item.to_dict())
            _dict['trigger_criteria'] = _items
        # override the default output from pydantic by calling `to_dict()` of updated
        if self.updated:
            _dict['updated'] = self.updated.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CmspbFrontendConfigurationAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activity_type_description": obj.get("activity_type_description"),
            "activity_type_name": obj.get("activity_type_name"),
            "authority_display": obj.get("authority_display"),
            "authority_distance_max": obj.get("authority_distance_max"),
            "authority_distance_min": obj.get("authority_distance_min"),
            "configuration_id": obj.get("configuration_id"),
            "created": CmspbFrontendConfigurationAccessEntry.from_dict(obj.get("created")) if obj.get("created") is not None else None,
            "cves": obj.get("cves"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "entities_count": obj.get("entities_count"),
            "last_planned_at": TimestamppbTimestamp.from_dict(obj.get("last_planned_at")) if obj.get("last_planned_at") is not None else None,
            "matching_entity_types": obj.get("matching_entity_types"),
            "mitre": CmspbFrontendConfigurationMitre.from_dict(obj.get("mitre")) if obj.get("mitre") is not None else None,
            "name": obj.get("name"),
            "objective": CmspbFrontendConfigurationObjective.from_dict(obj.get("objective")) if obj.get("objective") is not None else None,
            "parameters": [CmspbFrontendParameterObject.from_dict(_item) for _item in obj.get("parameters")] if obj.get("parameters") is not None else None,
            "period": obj.get("period"),
            "required_authorization": obj.get("required_authorization"),
            "stability": obj.get("stability"),
            "stealth": obj.get("stealth"),
            "targets_count": obj.get("targets_count"),
            "trigger_criteria": [CmspbFrontendTriggerObject.from_dict(_item) for _item in obj.get("trigger_criteria")] if obj.get("trigger_criteria") is not None else None,
            "updated": CmspbFrontendConfigurationAccessEntry.from_dict(obj.get("updated")) if obj.get("updated") is not None else None,
            "version": obj.get("version")
        })
        return _obj


