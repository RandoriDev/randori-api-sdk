# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from randori_api_sdk.models.cmspb_frontend_validation import CmspbFrontendValidation
from randori_api_sdk.models.structpb_value import StructpbValue
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CmspbFrontendTrigger(BaseModel):
    """
    CmspbFrontendTrigger
    """ # noqa: E501
    description: Optional[StrictStr] = None
    display_value: Optional[StrictStr] = None
    field_label: Optional[StrictStr] = None
    field_type: Optional[StrictStr] = None
    input_variable_path: Optional[StrictStr] = None
    is_configurable: Optional[StrictBool] = None
    is_matching: Optional[StrictBool] = None
    is_standard: Optional[StrictBool] = None
    operator: Optional[StrictStr] = None
    trigger_identifier: Optional[StrictStr] = None
    validation: Optional[CmspbFrontendValidation] = None
    value: Optional[StructpbValue] = None
    __properties: ClassVar[List[str]] = ["description", "display_value", "field_label", "field_type", "input_variable_path", "is_configurable", "is_matching", "is_standard", "operator", "trigger_identifier", "validation", "value"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CmspbFrontendTrigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of validation
        if self.validation:
            _dict['validation'] = self.validation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CmspbFrontendTrigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "display_value": obj.get("display_value"),
            "field_label": obj.get("field_label"),
            "field_type": obj.get("field_type"),
            "input_variable_path": obj.get("input_variable_path"),
            "is_configurable": obj.get("is_configurable"),
            "is_matching": obj.get("is_matching"),
            "is_standard": obj.get("is_standard"),
            "operator": obj.get("operator"),
            "trigger_identifier": obj.get("trigger_identifier"),
            "validation": CmspbFrontendValidation.from_dict(obj.get("validation")) if obj.get("validation") is not None else None,
            "value": StructpbValue.from_dict(obj.get("value")) if obj.get("value") is not None else None
        })
        return _obj


