# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Network(BaseModel):
    """
    Network
    """ # noqa: E501
    affiliation_state: Optional[StrictStr] = None
    authority: Optional[StrictBool] = None
    authority_distance: Optional[StrictInt] = None
    authority_override: Optional[StrictBool] = None
    characteristic_tags: Optional[List[StrictStr]] = None
    confidence: Optional[StrictInt] = None
    deleted: Optional[StrictBool] = None
    first_seen: Optional[datetime] = None
    id: StrictStr
    impact_score: Optional[StrictStr] = None
    ip_count: Optional[Union[StrictFloat, StrictInt]] = None
    last_seen: Optional[datetime] = None
    lens_id: Optional[StrictStr] = None
    lens_view: Optional[StrictStr] = None
    max_confidence: Optional[StrictInt] = None
    network: Optional[StrictStr] = None
    network_str: Optional[StrictStr] = None
    only_in_review_targets: Optional[StrictBool] = None
    open_port_count: Optional[StrictInt] = None
    org_id: StrictStr
    perspective: Optional[StrictStr] = None
    perspective_name: Optional[StrictStr] = None
    priority_impact_factor: Optional[Union[StrictFloat, StrictInt]] = None
    priority_score: Optional[Union[StrictFloat, StrictInt]] = None
    priority_status_factor: Optional[Union[StrictFloat, StrictInt]] = None
    priority_tags_factor: Optional[Union[StrictFloat, StrictInt]] = None
    service_count: Optional[Union[StrictFloat, StrictInt]] = None
    status: Optional[StrictStr] = None
    target_count: Optional[Union[StrictFloat, StrictInt]] = None
    target_temptation: Optional[StrictInt] = None
    user_tags: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["affiliation_state", "authority", "authority_distance", "authority_override", "characteristic_tags", "confidence", "deleted", "first_seen", "id", "impact_score", "ip_count", "last_seen", "lens_id", "lens_view", "max_confidence", "network", "network_str", "only_in_review_targets", "open_port_count", "org_id", "perspective", "perspective_name", "priority_impact_factor", "priority_score", "priority_status_factor", "priority_tags_factor", "service_count", "status", "target_count", "target_temptation", "user_tags"]

    @field_validator('affiliation_state')
    def affiliation_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'Unaffiliated'):
            raise ValueError("must be one of enum values ('None', 'Unaffiliated')")
        return value

    @field_validator('impact_score')
    def impact_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'Low', 'Medium', 'High'):
            raise ValueError("must be one of enum values ('None', 'Low', 'Medium', 'High')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'Needs Investigation', 'Needs Resolution', 'Needs Review', 'Mitigated', 'Accepted'):
            raise ValueError("must be one of enum values ('None', 'Needs Investigation', 'Needs Resolution', 'Needs Review', 'Mitigated', 'Accepted')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Network from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Network from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affiliation_state": obj.get("affiliation_state"),
            "authority": obj.get("authority"),
            "authority_distance": obj.get("authority_distance"),
            "authority_override": obj.get("authority_override"),
            "characteristic_tags": obj.get("characteristic_tags"),
            "confidence": obj.get("confidence"),
            "deleted": obj.get("deleted"),
            "first_seen": obj.get("first_seen"),
            "id": obj.get("id"),
            "impact_score": obj.get("impact_score"),
            "ip_count": obj.get("ip_count"),
            "last_seen": obj.get("last_seen"),
            "lens_id": obj.get("lens_id"),
            "lens_view": obj.get("lens_view"),
            "max_confidence": obj.get("max_confidence"),
            "network": obj.get("network"),
            "network_str": obj.get("network_str"),
            "only_in_review_targets": obj.get("only_in_review_targets"),
            "open_port_count": obj.get("open_port_count"),
            "org_id": obj.get("org_id"),
            "perspective": obj.get("perspective"),
            "perspective_name": obj.get("perspective_name"),
            "priority_impact_factor": obj.get("priority_impact_factor"),
            "priority_score": obj.get("priority_score"),
            "priority_status_factor": obj.get("priority_status_factor"),
            "priority_tags_factor": obj.get("priority_tags_factor"),
            "service_count": obj.get("service_count"),
            "status": obj.get("status"),
            "target_count": obj.get("target_count"),
            "target_temptation": obj.get("target_temptation"),
            "user_tags": obj.get("user_tags")
        })
        return _obj


