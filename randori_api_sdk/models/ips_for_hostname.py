# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IpsForHostname(BaseModel):
    """
    IpsForHostname
    """ # noqa: E501
    affiliation_state: Optional[StrictStr] = None
    confidence: Optional[StrictInt] = None
    country: Optional[StrictStr] = None
    deleted: Optional[StrictBool] = None
    hostname_id: Optional[StrictStr] = None
    id: StrictStr
    impact_score: Optional[StrictStr] = None
    ip: Optional[StrictStr] = None
    ip_id: Optional[StrictStr] = None
    ip_str: Optional[StrictStr] = None
    last_seen: Optional[datetime] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    lens_id: Optional[StrictStr] = None
    lens_view: Optional[StrictStr] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    open_port_count: Optional[StrictInt] = None
    org_id: StrictStr
    perspective: Optional[StrictStr] = None
    perspective_name: Optional[StrictStr] = None
    radius: Optional[Union[StrictFloat, StrictInt]] = None
    service_count: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    target_count: Optional[StrictInt] = None
    target_temptation: Optional[StrictInt] = None
    top_hostname: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["affiliation_state", "confidence", "country", "deleted", "hostname_id", "id", "impact_score", "ip", "ip_id", "ip_str", "last_seen", "latitude", "lens_id", "lens_view", "longitude", "open_port_count", "org_id", "perspective", "perspective_name", "radius", "service_count", "status", "target_count", "target_temptation", "top_hostname"]

    @field_validator('affiliation_state')
    def affiliation_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'Unaffiliated'):
            raise ValueError("must be one of enum values ('None', 'Unaffiliated')")
        return value

    @field_validator('impact_score')
    def impact_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'Low', 'Medium', 'High'):
            raise ValueError("must be one of enum values ('None', 'Low', 'Medium', 'High')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'Needs Investigation', 'Needs Resolution', 'Needs Review', 'Mitigated', 'Accepted'):
            raise ValueError("must be one of enum values ('None', 'Needs Investigation', 'Needs Resolution', 'Needs Review', 'Mitigated', 'Accepted')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IpsForHostname from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IpsForHostname from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affiliation_state": obj.get("affiliation_state"),
            "confidence": obj.get("confidence"),
            "country": obj.get("country"),
            "deleted": obj.get("deleted"),
            "hostname_id": obj.get("hostname_id"),
            "id": obj.get("id"),
            "impact_score": obj.get("impact_score"),
            "ip": obj.get("ip"),
            "ip_id": obj.get("ip_id"),
            "ip_str": obj.get("ip_str"),
            "last_seen": obj.get("last_seen"),
            "latitude": obj.get("latitude"),
            "lens_id": obj.get("lens_id"),
            "lens_view": obj.get("lens_view"),
            "longitude": obj.get("longitude"),
            "open_port_count": obj.get("open_port_count"),
            "org_id": obj.get("org_id"),
            "perspective": obj.get("perspective"),
            "perspective_name": obj.get("perspective_name"),
            "radius": obj.get("radius"),
            "service_count": obj.get("service_count"),
            "status": obj.get("status"),
            "target_count": obj.get("target_count"),
            "target_temptation": obj.get("target_temptation"),
            "top_hostname": obj.get("top_hostname")
        })
        return _obj


