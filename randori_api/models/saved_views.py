# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class SavedViews(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'description': 'str',
        'edited_at': 'datetime',
        'entity_type': 'str',
        'filter_data': 'object',
        'id': 'str',
        'name': 'str',
        'org_id': 'str',
        'sort_data': 'object'
    }

    attribute_map = {
        'created_at': 'created_at',
        'description': 'description',
        'edited_at': 'edited_at',
        'entity_type': 'entity_type',
        'filter_data': 'filter_data',
        'id': 'id',
        'name': 'name',
        'org_id': 'org_id',
        'sort_data': 'sort_data'
    }

    def __init__(self, created_at=None, description=None, edited_at=None, entity_type=None, filter_data=None, id=None, name=None, org_id=None, sort_data=None, local_vars_configuration=None):  # noqa: E501
        """SavedViews - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._description = None
        self._edited_at = None
        self._entity_type = None
        self._filter_data = None
        self._id = None
        self._name = None
        self._org_id = None
        self._sort_data = None
        self.discriminator = None

        self.created_at = created_at
        self.description = description
        self.edited_at = edited_at
        self.entity_type = entity_type
        self.filter_data = filter_data
        if id is not None:
            self.id = id
        self.name = name
        self.org_id = org_id
        self.sort_data = sort_data

    @property
    def created_at(self):
        """Gets the created_at of this SavedViews.  # noqa: E501


        :return: The created_at of this SavedViews.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SavedViews.


        :param created_at: The created_at of this SavedViews.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this SavedViews.  # noqa: E501


        :return: The description of this SavedViews.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SavedViews.


        :param description: The description of this SavedViews.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def edited_at(self):
        """Gets the edited_at of this SavedViews.  # noqa: E501


        :return: The edited_at of this SavedViews.  # noqa: E501
        :rtype: datetime
        """
        return self._edited_at

    @edited_at.setter
    def edited_at(self, edited_at):
        """Sets the edited_at of this SavedViews.


        :param edited_at: The edited_at of this SavedViews.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and edited_at is None:  # noqa: E501
            raise ValueError("Invalid value for `edited_at`, must not be `None`")  # noqa: E501

        self._edited_at = edited_at

    @property
    def entity_type(self):
        """Gets the entity_type of this SavedViews.  # noqa: E501


        :return: The entity_type of this SavedViews.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this SavedViews.


        :param entity_type: The entity_type of this SavedViews.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and entity_type is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501
        allowed_values = ["target", "hostname", "service", "ip", "network", "social", "runbook", "implant", "redirector", "topLevelDetection"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def filter_data(self):
        """Gets the filter_data of this SavedViews.  # noqa: E501


        :return: The filter_data of this SavedViews.  # noqa: E501
        :rtype: object
        """
        return self._filter_data

    @filter_data.setter
    def filter_data(self, filter_data):
        """Sets the filter_data of this SavedViews.


        :param filter_data: The filter_data of this SavedViews.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and filter_data is None:  # noqa: E501
            raise ValueError("Invalid value for `filter_data`, must not be `None`")  # noqa: E501

        self._filter_data = filter_data

    @property
    def id(self):
        """Gets the id of this SavedViews.  # noqa: E501


        :return: The id of this SavedViews.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavedViews.


        :param id: The id of this SavedViews.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SavedViews.  # noqa: E501


        :return: The name of this SavedViews.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SavedViews.


        :param name: The name of this SavedViews.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this SavedViews.  # noqa: E501


        :return: The org_id of this SavedViews.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this SavedViews.


        :param org_id: The org_id of this SavedViews.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def sort_data(self):
        """Gets the sort_data of this SavedViews.  # noqa: E501


        :return: The sort_data of this SavedViews.  # noqa: E501
        :rtype: object
        """
        return self._sort_data

    @sort_data.setter
    def sort_data(self, sort_data):
        """Sets the sort_data of this SavedViews.


        :param sort_data: The sort_data of this SavedViews.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and sort_data is None:  # noqa: E501
            raise ValueError("Invalid value for `sort_data`, must not be `None`")  # noqa: E501

        self._sort_data = sort_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavedViews):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SavedViews):
            return True

        return self.to_dict() != other.to_dict()
