# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class TargetTemptationEntityReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity_type': 'str',
        'min_first_seen': 'datetime',
        'tt_ranges': 'list[TargetTemptationRange]'
    }

    attribute_map = {
        'entity_type': 'entity_type',
        'min_first_seen': 'min_first_seen',
        'tt_ranges': 'tt_ranges'
    }

    def __init__(self, entity_type=None, min_first_seen=None, tt_ranges=None, local_vars_configuration=None):  # noqa: E501
        """TargetTemptationEntityReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._entity_type = None
        self._min_first_seen = None
        self._tt_ranges = None
        self.discriminator = None

        self.entity_type = entity_type
        self.min_first_seen = min_first_seen
        self.tt_ranges = tt_ranges

    @property
    def entity_type(self):
        """Gets the entity_type of this TargetTemptationEntityReq.  # noqa: E501


        :return: The entity_type of this TargetTemptationEntityReq.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this TargetTemptationEntityReq.


        :param entity_type: The entity_type of this TargetTemptationEntityReq.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and entity_type is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ip", "hostname", "network", "target", "service", "poc"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def min_first_seen(self):
        """Gets the min_first_seen of this TargetTemptationEntityReq.  # noqa: E501


        :return: The min_first_seen of this TargetTemptationEntityReq.  # noqa: E501
        :rtype: datetime
        """
        return self._min_first_seen

    @min_first_seen.setter
    def min_first_seen(self, min_first_seen):
        """Sets the min_first_seen of this TargetTemptationEntityReq.


        :param min_first_seen: The min_first_seen of this TargetTemptationEntityReq.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and min_first_seen is None:  # noqa: E501
            raise ValueError("Invalid value for `min_first_seen`, must not be `None`")  # noqa: E501

        self._min_first_seen = min_first_seen

    @property
    def tt_ranges(self):
        """Gets the tt_ranges of this TargetTemptationEntityReq.  # noqa: E501

        Max allowed 20 ranges  # noqa: E501

        :return: The tt_ranges of this TargetTemptationEntityReq.  # noqa: E501
        :rtype: list[TargetTemptationRange]
        """
        return self._tt_ranges

    @tt_ranges.setter
    def tt_ranges(self, tt_ranges):
        """Sets the tt_ranges of this TargetTemptationEntityReq.

        Max allowed 20 ranges  # noqa: E501

        :param tt_ranges: The tt_ranges of this TargetTemptationEntityReq.  # noqa: E501
        :type: list[TargetTemptationRange]
        """
        if self.local_vars_configuration.client_side_validation and tt_ranges is None:  # noqa: E501
            raise ValueError("Invalid value for `tt_ranges`, must not be `None`")  # noqa: E501

        self._tt_ranges = tt_ranges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetTemptationEntityReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TargetTemptationEntityReq):
            return True

        return self.to_dict() != other.to_dict()
