# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class QuerybuilderGroupMemberSchema4(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'field': 'str',
        'id': 'str',
        'input': 'str',
        'label': 'str',
        'operator': 'str',
        'type': 'str',
        'ui_id': 'str',
        'value': 'str'
    }

    attribute_map = {
        'field': 'field',
        'id': 'id',
        'input': 'input',
        'label': 'label',
        'operator': 'operator',
        'type': 'type',
        'ui_id': 'ui_id',
        'value': 'value'
    }

    def __init__(self, field=None, id=None, input=None, label=None, operator=None, type=None, ui_id=None, value=None, local_vars_configuration=None):  # noqa: E501
        """QuerybuilderGroupMemberSchema4 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._field = None
        self._id = None
        self._input = None
        self._label = None
        self._operator = None
        self._type = None
        self._ui_id = None
        self._value = None
        self.discriminator = None

        self.field = field
        if id is not None:
            self.id = id
        if input is not None:
            self.input = input
        if label is not None:
            self.label = label
        self.operator = operator
        if type is not None:
            self.type = type
        if ui_id is not None:
            self.ui_id = ui_id
        self.value = value

    @property
    def field(self):
        """Gets the field of this QuerybuilderGroupMemberSchema4.  # noqa: E501


        :return: The field of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this QuerybuilderGroupMemberSchema4.


        :param field: The field of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and field is None:  # noqa: E501
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def id(self):
        """Gets the id of this QuerybuilderGroupMemberSchema4.  # noqa: E501


        :return: The id of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuerybuilderGroupMemberSchema4.


        :param id: The id of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def input(self):
        """Gets the input of this QuerybuilderGroupMemberSchema4.  # noqa: E501


        :return: The input of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this QuerybuilderGroupMemberSchema4.


        :param input: The input of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :type: str
        """

        self._input = input

    @property
    def label(self):
        """Gets the label of this QuerybuilderGroupMemberSchema4.  # noqa: E501


        :return: The label of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this QuerybuilderGroupMemberSchema4.


        :param label: The label of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def operator(self):
        """Gets the operator of this QuerybuilderGroupMemberSchema4.  # noqa: E501


        :return: The operator of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this QuerybuilderGroupMemberSchema4.


        :param operator: The operator of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and operator is None:  # noqa: E501
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501
        allowed_values = ["is_not_null", "less_utc_seconds_ago", "is_not_empty", "greater_or_equal", "not_in", "matches", "not_contains", "equal", "not_ends_with", "in", "between", "less_or_equal", "not_has_key", "greater_or_equal_utc_seconds_ago", "ends_with", "not_contained_by", "greater_utc_seconds_ago", "contains_element", "not_icontains", "not_equal", "begins_with", "is_empty", "less_or_equal_utc_seconds_ago", "is_null", "contains", "not_contains_element", "icontains", "greater", "not_begins_with", "less", "matched_by", "has_key", "contained_by"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operator not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"  # noqa: E501
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def type(self):
        """Gets the type of this QuerybuilderGroupMemberSchema4.  # noqa: E501


        :return: The type of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QuerybuilderGroupMemberSchema4.


        :param type: The type of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def ui_id(self):
        """Gets the ui_id of this QuerybuilderGroupMemberSchema4.  # noqa: E501


        :return: The ui_id of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :rtype: str
        """
        return self._ui_id

    @ui_id.setter
    def ui_id(self, ui_id):
        """Sets the ui_id of this QuerybuilderGroupMemberSchema4.


        :param ui_id: The ui_id of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :type: str
        """

        self._ui_id = ui_id

    @property
    def value(self):
        """Gets the value of this QuerybuilderGroupMemberSchema4.  # noqa: E501


        :return: The value of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this QuerybuilderGroupMemberSchema4.


        :param value: The value of this QuerybuilderGroupMemberSchema4.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuerybuilderGroupMemberSchema4):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuerybuilderGroupMemberSchema4):
            return True

        return self.to_dict() != other.to_dict()
