# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class AttackRunbook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'dst_email': 'list[str]',
        'dst_host': 'list[str]',
        'dst_ip': 'list[str]',
        'dst_mac': 'list[str]',
        'dst_network': 'list[str]',
        'dst_path': 'list[str]',
        'dst_port': 'list[str]',
        'end_time': 'datetime',
        'guidance': 'str',
        'id': 'str',
        'implant_ids': 'list[str]',
        'implant_nick': 'str',
        'implant_src_host': 'list[str]',
        'implant_src_ip': 'list[str]',
        'name': 'str',
        'objective': 'str',
        'org_id': 'str',
        'perspective_metadata': 'list[object]',
        'results': 'str',
        'runbook_id': 'str',
        'src_email': 'list[str]',
        'src_host': 'list[str]',
        'src_ip': 'list[str]',
        'src_mac': 'list[str]',
        'start_time': 'datetime',
        'status': 'str',
        'technique_ids': 'list[str]',
        'trigger': 'list[object]',
        'uid': 'str'
    }

    attribute_map = {
        'description': 'description',
        'dst_email': 'dst_email',
        'dst_host': 'dst_host',
        'dst_ip': 'dst_ip',
        'dst_mac': 'dst_mac',
        'dst_network': 'dst_network',
        'dst_path': 'dst_path',
        'dst_port': 'dst_port',
        'end_time': 'end_time',
        'guidance': 'guidance',
        'id': 'id',
        'implant_ids': 'implant_ids',
        'implant_nick': 'implant_nick',
        'implant_src_host': 'implant_src_host',
        'implant_src_ip': 'implant_src_ip',
        'name': 'name',
        'objective': 'objective',
        'org_id': 'org_id',
        'perspective_metadata': 'perspective_metadata',
        'results': 'results',
        'runbook_id': 'runbook_id',
        'src_email': 'src_email',
        'src_host': 'src_host',
        'src_ip': 'src_ip',
        'src_mac': 'src_mac',
        'start_time': 'start_time',
        'status': 'status',
        'technique_ids': 'technique_ids',
        'trigger': 'trigger',
        'uid': 'uid'
    }

    def __init__(self, description=None, dst_email=None, dst_host=None, dst_ip=None, dst_mac=None, dst_network=None, dst_path=None, dst_port=None, end_time=None, guidance=None, id=None, implant_ids=None, implant_nick=None, implant_src_host=None, implant_src_ip=None, name=None, objective=None, org_id=None, perspective_metadata=None, results=None, runbook_id=None, src_email=None, src_host=None, src_ip=None, src_mac=None, start_time=None, status=None, technique_ids=None, trigger=None, uid=None, local_vars_configuration=None):  # noqa: E501
        """AttackRunbook - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._dst_email = None
        self._dst_host = None
        self._dst_ip = None
        self._dst_mac = None
        self._dst_network = None
        self._dst_path = None
        self._dst_port = None
        self._end_time = None
        self._guidance = None
        self._id = None
        self._implant_ids = None
        self._implant_nick = None
        self._implant_src_host = None
        self._implant_src_ip = None
        self._name = None
        self._objective = None
        self._org_id = None
        self._perspective_metadata = None
        self._results = None
        self._runbook_id = None
        self._src_email = None
        self._src_host = None
        self._src_ip = None
        self._src_mac = None
        self._start_time = None
        self._status = None
        self._technique_ids = None
        self._trigger = None
        self._uid = None
        self.discriminator = None

        self.description = description
        self.dst_email = dst_email
        self.dst_host = dst_host
        if dst_ip is not None:
            self.dst_ip = dst_ip
        self.dst_mac = dst_mac
        if dst_network is not None:
            self.dst_network = dst_network
        self.dst_path = dst_path
        self.dst_port = dst_port
        self.end_time = end_time
        self.guidance = guidance
        if id is not None:
            self.id = id
        self.implant_ids = implant_ids
        self.implant_nick = implant_nick
        self.implant_src_host = implant_src_host
        if implant_src_ip is not None:
            self.implant_src_ip = implant_src_ip
        self.name = name
        self.objective = objective
        self.org_id = org_id
        self.perspective_metadata = perspective_metadata
        self.results = results
        self.runbook_id = runbook_id
        self.src_email = src_email
        self.src_host = src_host
        if src_ip is not None:
            self.src_ip = src_ip
        self.src_mac = src_mac
        self.start_time = start_time
        self.status = status
        self.technique_ids = technique_ids
        self.trigger = trigger
        self.uid = uid

    @property
    def description(self):
        """Gets the description of this AttackRunbook.  # noqa: E501


        :return: The description of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AttackRunbook.


        :param description: The description of this AttackRunbook.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dst_email(self):
        """Gets the dst_email of this AttackRunbook.  # noqa: E501


        :return: The dst_email of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_email

    @dst_email.setter
    def dst_email(self, dst_email):
        """Sets the dst_email of this AttackRunbook.


        :param dst_email: The dst_email of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._dst_email = dst_email

    @property
    def dst_host(self):
        """Gets the dst_host of this AttackRunbook.  # noqa: E501


        :return: The dst_host of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_host

    @dst_host.setter
    def dst_host(self, dst_host):
        """Sets the dst_host of this AttackRunbook.


        :param dst_host: The dst_host of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._dst_host = dst_host

    @property
    def dst_ip(self):
        """Gets the dst_ip of this AttackRunbook.  # noqa: E501


        :return: The dst_ip of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this AttackRunbook.


        :param dst_ip: The dst_ip of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._dst_ip = dst_ip

    @property
    def dst_mac(self):
        """Gets the dst_mac of this AttackRunbook.  # noqa: E501


        :return: The dst_mac of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_mac

    @dst_mac.setter
    def dst_mac(self, dst_mac):
        """Sets the dst_mac of this AttackRunbook.


        :param dst_mac: The dst_mac of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._dst_mac = dst_mac

    @property
    def dst_network(self):
        """Gets the dst_network of this AttackRunbook.  # noqa: E501


        :return: The dst_network of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_network

    @dst_network.setter
    def dst_network(self, dst_network):
        """Sets the dst_network of this AttackRunbook.


        :param dst_network: The dst_network of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._dst_network = dst_network

    @property
    def dst_path(self):
        """Gets the dst_path of this AttackRunbook.  # noqa: E501


        :return: The dst_path of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_path

    @dst_path.setter
    def dst_path(self, dst_path):
        """Sets the dst_path of this AttackRunbook.


        :param dst_path: The dst_path of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._dst_path = dst_path

    @property
    def dst_port(self):
        """Gets the dst_port of this AttackRunbook.  # noqa: E501


        :return: The dst_port of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this AttackRunbook.


        :param dst_port: The dst_port of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._dst_port = dst_port

    @property
    def end_time(self):
        """Gets the end_time of this AttackRunbook.  # noqa: E501


        :return: The end_time of this AttackRunbook.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AttackRunbook.


        :param end_time: The end_time of this AttackRunbook.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def guidance(self):
        """Gets the guidance of this AttackRunbook.  # noqa: E501


        :return: The guidance of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._guidance

    @guidance.setter
    def guidance(self, guidance):
        """Sets the guidance of this AttackRunbook.


        :param guidance: The guidance of this AttackRunbook.  # noqa: E501
        :type: str
        """

        self._guidance = guidance

    @property
    def id(self):
        """Gets the id of this AttackRunbook.  # noqa: E501


        :return: The id of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttackRunbook.


        :param id: The id of this AttackRunbook.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def implant_ids(self):
        """Gets the implant_ids of this AttackRunbook.  # noqa: E501


        :return: The implant_ids of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._implant_ids

    @implant_ids.setter
    def implant_ids(self, implant_ids):
        """Sets the implant_ids of this AttackRunbook.


        :param implant_ids: The implant_ids of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._implant_ids = implant_ids

    @property
    def implant_nick(self):
        """Gets the implant_nick of this AttackRunbook.  # noqa: E501


        :return: The implant_nick of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._implant_nick

    @implant_nick.setter
    def implant_nick(self, implant_nick):
        """Sets the implant_nick of this AttackRunbook.


        :param implant_nick: The implant_nick of this AttackRunbook.  # noqa: E501
        :type: str
        """

        self._implant_nick = implant_nick

    @property
    def implant_src_host(self):
        """Gets the implant_src_host of this AttackRunbook.  # noqa: E501


        :return: The implant_src_host of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._implant_src_host

    @implant_src_host.setter
    def implant_src_host(self, implant_src_host):
        """Sets the implant_src_host of this AttackRunbook.


        :param implant_src_host: The implant_src_host of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._implant_src_host = implant_src_host

    @property
    def implant_src_ip(self):
        """Gets the implant_src_ip of this AttackRunbook.  # noqa: E501


        :return: The implant_src_ip of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._implant_src_ip

    @implant_src_ip.setter
    def implant_src_ip(self, implant_src_ip):
        """Sets the implant_src_ip of this AttackRunbook.


        :param implant_src_ip: The implant_src_ip of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._implant_src_ip = implant_src_ip

    @property
    def name(self):
        """Gets the name of this AttackRunbook.  # noqa: E501


        :return: The name of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttackRunbook.


        :param name: The name of this AttackRunbook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def objective(self):
        """Gets the objective of this AttackRunbook.  # noqa: E501


        :return: The objective of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this AttackRunbook.


        :param objective: The objective of this AttackRunbook.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def org_id(self):
        """Gets the org_id of this AttackRunbook.  # noqa: E501


        :return: The org_id of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AttackRunbook.


        :param org_id: The org_id of this AttackRunbook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def perspective_metadata(self):
        """Gets the perspective_metadata of this AttackRunbook.  # noqa: E501


        :return: The perspective_metadata of this AttackRunbook.  # noqa: E501
        :rtype: list[object]
        """
        return self._perspective_metadata

    @perspective_metadata.setter
    def perspective_metadata(self, perspective_metadata):
        """Sets the perspective_metadata of this AttackRunbook.


        :param perspective_metadata: The perspective_metadata of this AttackRunbook.  # noqa: E501
        :type: list[object]
        """

        self._perspective_metadata = perspective_metadata

    @property
    def results(self):
        """Gets the results of this AttackRunbook.  # noqa: E501


        :return: The results of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this AttackRunbook.


        :param results: The results of this AttackRunbook.  # noqa: E501
        :type: str
        """

        self._results = results

    @property
    def runbook_id(self):
        """Gets the runbook_id of this AttackRunbook.  # noqa: E501


        :return: The runbook_id of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._runbook_id

    @runbook_id.setter
    def runbook_id(self, runbook_id):
        """Sets the runbook_id of this AttackRunbook.


        :param runbook_id: The runbook_id of this AttackRunbook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and runbook_id is None:  # noqa: E501
            raise ValueError("Invalid value for `runbook_id`, must not be `None`")  # noqa: E501

        self._runbook_id = runbook_id

    @property
    def src_email(self):
        """Gets the src_email of this AttackRunbook.  # noqa: E501


        :return: The src_email of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_email

    @src_email.setter
    def src_email(self, src_email):
        """Sets the src_email of this AttackRunbook.


        :param src_email: The src_email of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._src_email = src_email

    @property
    def src_host(self):
        """Gets the src_host of this AttackRunbook.  # noqa: E501


        :return: The src_host of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_host

    @src_host.setter
    def src_host(self, src_host):
        """Sets the src_host of this AttackRunbook.


        :param src_host: The src_host of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._src_host = src_host

    @property
    def src_ip(self):
        """Gets the src_ip of this AttackRunbook.  # noqa: E501


        :return: The src_ip of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this AttackRunbook.


        :param src_ip: The src_ip of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._src_ip = src_ip

    @property
    def src_mac(self):
        """Gets the src_mac of this AttackRunbook.  # noqa: E501


        :return: The src_mac of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_mac

    @src_mac.setter
    def src_mac(self, src_mac):
        """Sets the src_mac of this AttackRunbook.


        :param src_mac: The src_mac of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """

        self._src_mac = src_mac

    @property
    def start_time(self):
        """Gets the start_time of this AttackRunbook.  # noqa: E501


        :return: The start_time of this AttackRunbook.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AttackRunbook.


        :param start_time: The start_time of this AttackRunbook.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and start_time is None:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this AttackRunbook.  # noqa: E501


        :return: The status of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AttackRunbook.


        :param status: The status of this AttackRunbook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def technique_ids(self):
        """Gets the technique_ids of this AttackRunbook.  # noqa: E501


        :return: The technique_ids of this AttackRunbook.  # noqa: E501
        :rtype: list[str]
        """
        return self._technique_ids

    @technique_ids.setter
    def technique_ids(self, technique_ids):
        """Sets the technique_ids of this AttackRunbook.


        :param technique_ids: The technique_ids of this AttackRunbook.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and technique_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `technique_ids`, must not be `None`")  # noqa: E501

        self._technique_ids = technique_ids

    @property
    def trigger(self):
        """Gets the trigger of this AttackRunbook.  # noqa: E501


        :return: The trigger of this AttackRunbook.  # noqa: E501
        :rtype: list[object]
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this AttackRunbook.


        :param trigger: The trigger of this AttackRunbook.  # noqa: E501
        :type: list[object]
        """

        self._trigger = trigger

    @property
    def uid(self):
        """Gets the uid of this AttackRunbook.  # noqa: E501


        :return: The uid of this AttackRunbook.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this AttackRunbook.


        :param uid: The uid of this AttackRunbook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and uid is None:  # noqa: E501
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttackRunbook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttackRunbook):
            return True

        return self.to_dict() != other.to_dict()
