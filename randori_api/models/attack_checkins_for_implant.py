# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class AttackCheckinsForImplant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bart_id': 'str',
        'id': 'str',
        'implant_id': 'str',
        'last_checkin': 'datetime',
        'method': 'object',
        'org_id': 'str',
        'src_ip': 'str',
        'src_ip_str': 'str'
    }

    attribute_map = {
        'bart_id': 'bart_id',
        'id': 'id',
        'implant_id': 'implant_id',
        'last_checkin': 'last_checkin',
        'method': 'method',
        'org_id': 'org_id',
        'src_ip': 'src_ip',
        'src_ip_str': 'src_ip_str'
    }

    def __init__(self, bart_id=None, id=None, implant_id=None, last_checkin=None, method=None, org_id=None, src_ip=None, src_ip_str=None, local_vars_configuration=None):  # noqa: E501
        """AttackCheckinsForImplant - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bart_id = None
        self._id = None
        self._implant_id = None
        self._last_checkin = None
        self._method = None
        self._org_id = None
        self._src_ip = None
        self._src_ip_str = None
        self.discriminator = None

        self.bart_id = bart_id
        self.id = id
        self.implant_id = implant_id
        self.last_checkin = last_checkin
        self.method = method
        self.org_id = org_id
        self.src_ip = src_ip
        self.src_ip_str = src_ip_str

    @property
    def bart_id(self):
        """Gets the bart_id of this AttackCheckinsForImplant.  # noqa: E501


        :return: The bart_id of this AttackCheckinsForImplant.  # noqa: E501
        :rtype: str
        """
        return self._bart_id

    @bart_id.setter
    def bart_id(self, bart_id):
        """Sets the bart_id of this AttackCheckinsForImplant.


        :param bart_id: The bart_id of this AttackCheckinsForImplant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bart_id is None:  # noqa: E501
            raise ValueError("Invalid value for `bart_id`, must not be `None`")  # noqa: E501

        self._bart_id = bart_id

    @property
    def id(self):
        """Gets the id of this AttackCheckinsForImplant.  # noqa: E501


        :return: The id of this AttackCheckinsForImplant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttackCheckinsForImplant.


        :param id: The id of this AttackCheckinsForImplant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def implant_id(self):
        """Gets the implant_id of this AttackCheckinsForImplant.  # noqa: E501


        :return: The implant_id of this AttackCheckinsForImplant.  # noqa: E501
        :rtype: str
        """
        return self._implant_id

    @implant_id.setter
    def implant_id(self, implant_id):
        """Sets the implant_id of this AttackCheckinsForImplant.


        :param implant_id: The implant_id of this AttackCheckinsForImplant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and implant_id is None:  # noqa: E501
            raise ValueError("Invalid value for `implant_id`, must not be `None`")  # noqa: E501

        self._implant_id = implant_id

    @property
    def last_checkin(self):
        """Gets the last_checkin of this AttackCheckinsForImplant.  # noqa: E501


        :return: The last_checkin of this AttackCheckinsForImplant.  # noqa: E501
        :rtype: datetime
        """
        return self._last_checkin

    @last_checkin.setter
    def last_checkin(self, last_checkin):
        """Sets the last_checkin of this AttackCheckinsForImplant.


        :param last_checkin: The last_checkin of this AttackCheckinsForImplant.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and last_checkin is None:  # noqa: E501
            raise ValueError("Invalid value for `last_checkin`, must not be `None`")  # noqa: E501

        self._last_checkin = last_checkin

    @property
    def method(self):
        """Gets the method of this AttackCheckinsForImplant.  # noqa: E501


        :return: The method of this AttackCheckinsForImplant.  # noqa: E501
        :rtype: object
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this AttackCheckinsForImplant.


        :param method: The method of this AttackCheckinsForImplant.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and method is None:  # noqa: E501
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def org_id(self):
        """Gets the org_id of this AttackCheckinsForImplant.  # noqa: E501


        :return: The org_id of this AttackCheckinsForImplant.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AttackCheckinsForImplant.


        :param org_id: The org_id of this AttackCheckinsForImplant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def src_ip(self):
        """Gets the src_ip of this AttackCheckinsForImplant.  # noqa: E501


        :return: The src_ip of this AttackCheckinsForImplant.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this AttackCheckinsForImplant.


        :param src_ip: The src_ip of this AttackCheckinsForImplant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and src_ip is None:  # noqa: E501
            raise ValueError("Invalid value for `src_ip`, must not be `None`")  # noqa: E501

        self._src_ip = src_ip

    @property
    def src_ip_str(self):
        """Gets the src_ip_str of this AttackCheckinsForImplant.  # noqa: E501


        :return: The src_ip_str of this AttackCheckinsForImplant.  # noqa: E501
        :rtype: str
        """
        return self._src_ip_str

    @src_ip_str.setter
    def src_ip_str(self, src_ip_str):
        """Sets the src_ip_str of this AttackCheckinsForImplant.


        :param src_ip_str: The src_ip_str of this AttackCheckinsForImplant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and src_ip_str is None:  # noqa: E501
            raise ValueError("Invalid value for `src_ip_str`, must not be `None`")  # noqa: E501

        self._src_ip_str = src_ip_str

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttackCheckinsForImplant):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttackCheckinsForImplant):
            return True

        return self.to_dict() != other.to_dict()
