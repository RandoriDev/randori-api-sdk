# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class PriorityRange(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prio_max': 'int',
        'prio_min': 'int',
        'prio_range_name': 'str'
    }

    attribute_map = {
        'prio_max': 'prio_max',
        'prio_min': 'prio_min',
        'prio_range_name': 'prio_range_name'
    }

    def __init__(self, prio_max=None, prio_min=None, prio_range_name=None, local_vars_configuration=None):  # noqa: E501
        """PriorityRange - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._prio_max = None
        self._prio_min = None
        self._prio_range_name = None
        self.discriminator = None

        self.prio_max = prio_max
        self.prio_min = prio_min
        self.prio_range_name = prio_range_name

    @property
    def prio_max(self):
        """Gets the prio_max of this PriorityRange.  # noqa: E501

        Inclusive of provided value  # noqa: E501

        :return: The prio_max of this PriorityRange.  # noqa: E501
        :rtype: int
        """
        return self._prio_max

    @prio_max.setter
    def prio_max(self, prio_max):
        """Sets the prio_max of this PriorityRange.

        Inclusive of provided value  # noqa: E501

        :param prio_max: The prio_max of this PriorityRange.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and prio_max is None:  # noqa: E501
            raise ValueError("Invalid value for `prio_max`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                prio_max is not None and prio_max > 200):  # noqa: E501
            raise ValueError("Invalid value for `prio_max`, must be a value less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                prio_max is not None and prio_max < 0):  # noqa: E501
            raise ValueError("Invalid value for `prio_max`, must be a value greater than or equal to `0`")  # noqa: E501

        self._prio_max = prio_max

    @property
    def prio_min(self):
        """Gets the prio_min of this PriorityRange.  # noqa: E501

        Inclusive of provided value  # noqa: E501

        :return: The prio_min of this PriorityRange.  # noqa: E501
        :rtype: int
        """
        return self._prio_min

    @prio_min.setter
    def prio_min(self, prio_min):
        """Sets the prio_min of this PriorityRange.

        Inclusive of provided value  # noqa: E501

        :param prio_min: The prio_min of this PriorityRange.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and prio_min is None:  # noqa: E501
            raise ValueError("Invalid value for `prio_min`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                prio_min is not None and prio_min > 200):  # noqa: E501
            raise ValueError("Invalid value for `prio_min`, must be a value less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                prio_min is not None and prio_min < 0):  # noqa: E501
            raise ValueError("Invalid value for `prio_min`, must be a value greater than or equal to `0`")  # noqa: E501

        self._prio_min = prio_min

    @property
    def prio_range_name(self):
        """Gets the prio_range_name of this PriorityRange.  # noqa: E501


        :return: The prio_range_name of this PriorityRange.  # noqa: E501
        :rtype: str
        """
        return self._prio_range_name

    @prio_range_name.setter
    def prio_range_name(self, prio_range_name):
        """Sets the prio_range_name of this PriorityRange.


        :param prio_range_name: The prio_range_name of this PriorityRange.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and prio_range_name is None:  # noqa: E501
            raise ValueError("Invalid value for `prio_range_name`, must not be `None`")  # noqa: E501
        allowed_values = ["medium", "high", "low"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and prio_range_name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `prio_range_name` ({0}), must be one of {1}"  # noqa: E501
                .format(prio_range_name, allowed_values)
            )

        self._prio_range_name = prio_range_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriorityRange):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PriorityRange):
            return True

        return self.to_dict() != other.to_dict()
