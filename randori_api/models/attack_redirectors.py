# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class AttackRedirectors(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bart_id': 'str',
        'created_on': 'datetime',
        'deleted': 'bool',
        'external_ip': 'str',
        'external_ip_str': 'str',
        'id': 'str',
        'org_id': 'str',
        'remote_row_id': 'int',
        'retired': 'datetime',
        'status': 'str',
        'updated_on': 'datetime',
        'usage': 'list[str]'
    }

    attribute_map = {
        'bart_id': 'bart_id',
        'created_on': 'created_on',
        'deleted': 'deleted',
        'external_ip': 'external_ip',
        'external_ip_str': 'external_ip_str',
        'id': 'id',
        'org_id': 'org_id',
        'remote_row_id': 'remote_row_id',
        'retired': 'retired',
        'status': 'status',
        'updated_on': 'updated_on',
        'usage': 'usage'
    }

    def __init__(self, bart_id=None, created_on=None, deleted=None, external_ip=None, external_ip_str=None, id=None, org_id=None, remote_row_id=None, retired=None, status=None, updated_on=None, usage=None, local_vars_configuration=None):  # noqa: E501
        """AttackRedirectors - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bart_id = None
        self._created_on = None
        self._deleted = None
        self._external_ip = None
        self._external_ip_str = None
        self._id = None
        self._org_id = None
        self._remote_row_id = None
        self._retired = None
        self._status = None
        self._updated_on = None
        self._usage = None
        self.discriminator = None

        self.bart_id = bart_id
        self.created_on = created_on
        self.deleted = deleted
        self.external_ip = external_ip
        self.external_ip_str = external_ip_str
        if id is not None:
            self.id = id
        self.org_id = org_id
        self.remote_row_id = remote_row_id
        self.retired = retired
        self.status = status
        self.updated_on = updated_on
        self.usage = usage

    @property
    def bart_id(self):
        """Gets the bart_id of this AttackRedirectors.  # noqa: E501


        :return: The bart_id of this AttackRedirectors.  # noqa: E501
        :rtype: str
        """
        return self._bart_id

    @bart_id.setter
    def bart_id(self, bart_id):
        """Sets the bart_id of this AttackRedirectors.


        :param bart_id: The bart_id of this AttackRedirectors.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bart_id is None:  # noqa: E501
            raise ValueError("Invalid value for `bart_id`, must not be `None`")  # noqa: E501

        self._bart_id = bart_id

    @property
    def created_on(self):
        """Gets the created_on of this AttackRedirectors.  # noqa: E501


        :return: The created_on of this AttackRedirectors.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this AttackRedirectors.


        :param created_on: The created_on of this AttackRedirectors.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_on is None:  # noqa: E501
            raise ValueError("Invalid value for `created_on`, must not be `None`")  # noqa: E501

        self._created_on = created_on

    @property
    def deleted(self):
        """Gets the deleted of this AttackRedirectors.  # noqa: E501


        :return: The deleted of this AttackRedirectors.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AttackRedirectors.


        :param deleted: The deleted of this AttackRedirectors.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and deleted is None:  # noqa: E501
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def external_ip(self):
        """Gets the external_ip of this AttackRedirectors.  # noqa: E501


        :return: The external_ip of this AttackRedirectors.  # noqa: E501
        :rtype: str
        """
        return self._external_ip

    @external_ip.setter
    def external_ip(self, external_ip):
        """Sets the external_ip of this AttackRedirectors.


        :param external_ip: The external_ip of this AttackRedirectors.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and external_ip is None:  # noqa: E501
            raise ValueError("Invalid value for `external_ip`, must not be `None`")  # noqa: E501

        self._external_ip = external_ip

    @property
    def external_ip_str(self):
        """Gets the external_ip_str of this AttackRedirectors.  # noqa: E501


        :return: The external_ip_str of this AttackRedirectors.  # noqa: E501
        :rtype: str
        """
        return self._external_ip_str

    @external_ip_str.setter
    def external_ip_str(self, external_ip_str):
        """Sets the external_ip_str of this AttackRedirectors.


        :param external_ip_str: The external_ip_str of this AttackRedirectors.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and external_ip_str is None:  # noqa: E501
            raise ValueError("Invalid value for `external_ip_str`, must not be `None`")  # noqa: E501

        self._external_ip_str = external_ip_str

    @property
    def id(self):
        """Gets the id of this AttackRedirectors.  # noqa: E501


        :return: The id of this AttackRedirectors.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttackRedirectors.


        :param id: The id of this AttackRedirectors.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this AttackRedirectors.  # noqa: E501


        :return: The org_id of this AttackRedirectors.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AttackRedirectors.


        :param org_id: The org_id of this AttackRedirectors.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def remote_row_id(self):
        """Gets the remote_row_id of this AttackRedirectors.  # noqa: E501


        :return: The remote_row_id of this AttackRedirectors.  # noqa: E501
        :rtype: int
        """
        return self._remote_row_id

    @remote_row_id.setter
    def remote_row_id(self, remote_row_id):
        """Sets the remote_row_id of this AttackRedirectors.


        :param remote_row_id: The remote_row_id of this AttackRedirectors.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and remote_row_id is None:  # noqa: E501
            raise ValueError("Invalid value for `remote_row_id`, must not be `None`")  # noqa: E501

        self._remote_row_id = remote_row_id

    @property
    def retired(self):
        """Gets the retired of this AttackRedirectors.  # noqa: E501


        :return: The retired of this AttackRedirectors.  # noqa: E501
        :rtype: datetime
        """
        return self._retired

    @retired.setter
    def retired(self, retired):
        """Sets the retired of this AttackRedirectors.


        :param retired: The retired of this AttackRedirectors.  # noqa: E501
        :type: datetime
        """

        self._retired = retired

    @property
    def status(self):
        """Gets the status of this AttackRedirectors.  # noqa: E501


        :return: The status of this AttackRedirectors.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AttackRedirectors.


        :param status: The status of this AttackRedirectors.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def updated_on(self):
        """Gets the updated_on of this AttackRedirectors.  # noqa: E501


        :return: The updated_on of this AttackRedirectors.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this AttackRedirectors.


        :param updated_on: The updated_on of this AttackRedirectors.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def usage(self):
        """Gets the usage of this AttackRedirectors.  # noqa: E501


        :return: The usage of this AttackRedirectors.  # noqa: E501
        :rtype: list[str]
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AttackRedirectors.


        :param usage: The usage of this AttackRedirectors.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and usage is None:  # noqa: E501
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttackRedirectors):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttackRedirectors):
            return True

        return self.to_dict() != other.to_dict()
