# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class Service(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'applicability': 'int',
        'confidence': 'int',
        'criticality': 'int',
        'deleted': 'bool',
        'description': 'str',
        'enumerability': 'int',
        'first_seen': 'datetime',
        'id': 'str',
        'instance_count': 'float',
        'ip_count': 'float',
        'last_seen': 'datetime',
        'lens_id': 'str',
        'lens_view': 'str',
        'name': 'str',
        'org_id': 'str',
        'perspective': 'str',
        'perspective_name': 'str',
        'post_exploit': 'int',
        'private_weakness': 'int',
        'public_weakness': 'int',
        'randori_notes': 'str',
        'reference': 'str',
        'research': 'int',
        'service_id': 'str',
        'target_temptation': 'int',
        'vendor': 'str',
        'version': 'str'
    }

    attribute_map = {
        'applicability': 'applicability',
        'confidence': 'confidence',
        'criticality': 'criticality',
        'deleted': 'deleted',
        'description': 'description',
        'enumerability': 'enumerability',
        'first_seen': 'first_seen',
        'id': 'id',
        'instance_count': 'instance_count',
        'ip_count': 'ip_count',
        'last_seen': 'last_seen',
        'lens_id': 'lens_id',
        'lens_view': 'lens_view',
        'name': 'name',
        'org_id': 'org_id',
        'perspective': 'perspective',
        'perspective_name': 'perspective_name',
        'post_exploit': 'post_exploit',
        'private_weakness': 'private_weakness',
        'public_weakness': 'public_weakness',
        'randori_notes': 'randori_notes',
        'reference': 'reference',
        'research': 'research',
        'service_id': 'service_id',
        'target_temptation': 'target_temptation',
        'vendor': 'vendor',
        'version': 'version'
    }

    def __init__(self, applicability=None, confidence=None, criticality=None, deleted=None, description=None, enumerability=None, first_seen=None, id=None, instance_count=None, ip_count=None, last_seen=None, lens_id=None, lens_view=None, name=None, org_id=None, perspective=None, perspective_name=None, post_exploit=None, private_weakness=None, public_weakness=None, randori_notes=None, reference=None, research=None, service_id=None, target_temptation=None, vendor=None, version=None, local_vars_configuration=None):  # noqa: E501
        """Service - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._applicability = None
        self._confidence = None
        self._criticality = None
        self._deleted = None
        self._description = None
        self._enumerability = None
        self._first_seen = None
        self._id = None
        self._instance_count = None
        self._ip_count = None
        self._last_seen = None
        self._lens_id = None
        self._lens_view = None
        self._name = None
        self._org_id = None
        self._perspective = None
        self._perspective_name = None
        self._post_exploit = None
        self._private_weakness = None
        self._public_weakness = None
        self._randori_notes = None
        self._reference = None
        self._research = None
        self._service_id = None
        self._target_temptation = None
        self._vendor = None
        self._version = None
        self.discriminator = None

        if applicability is not None:
            self.applicability = applicability
        if confidence is not None:
            self.confidence = confidence
        if criticality is not None:
            self.criticality = criticality
        if deleted is not None:
            self.deleted = deleted
        if description is not None:
            self.description = description
        if enumerability is not None:
            self.enumerability = enumerability
        if first_seen is not None:
            self.first_seen = first_seen
        self.id = id
        if instance_count is not None:
            self.instance_count = instance_count
        if ip_count is not None:
            self.ip_count = ip_count
        if last_seen is not None:
            self.last_seen = last_seen
        if lens_id is not None:
            self.lens_id = lens_id
        if lens_view is not None:
            self.lens_view = lens_view
        if name is not None:
            self.name = name
        self.org_id = org_id
        if perspective is not None:
            self.perspective = perspective
        if perspective_name is not None:
            self.perspective_name = perspective_name
        if post_exploit is not None:
            self.post_exploit = post_exploit
        if private_weakness is not None:
            self.private_weakness = private_weakness
        if public_weakness is not None:
            self.public_weakness = public_weakness
        if randori_notes is not None:
            self.randori_notes = randori_notes
        if reference is not None:
            self.reference = reference
        if research is not None:
            self.research = research
        if service_id is not None:
            self.service_id = service_id
        if target_temptation is not None:
            self.target_temptation = target_temptation
        if vendor is not None:
            self.vendor = vendor
        if version is not None:
            self.version = version

    @property
    def applicability(self):
        """Gets the applicability of this Service.  # noqa: E501


        :return: The applicability of this Service.  # noqa: E501
        :rtype: int
        """
        return self._applicability

    @applicability.setter
    def applicability(self, applicability):
        """Sets the applicability of this Service.


        :param applicability: The applicability of this Service.  # noqa: E501
        :type: int
        """

        self._applicability = applicability

    @property
    def confidence(self):
        """Gets the confidence of this Service.  # noqa: E501


        :return: The confidence of this Service.  # noqa: E501
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Service.


        :param confidence: The confidence of this Service.  # noqa: E501
        :type: int
        """

        self._confidence = confidence

    @property
    def criticality(self):
        """Gets the criticality of this Service.  # noqa: E501


        :return: The criticality of this Service.  # noqa: E501
        :rtype: int
        """
        return self._criticality

    @criticality.setter
    def criticality(self, criticality):
        """Sets the criticality of this Service.


        :param criticality: The criticality of this Service.  # noqa: E501
        :type: int
        """

        self._criticality = criticality

    @property
    def deleted(self):
        """Gets the deleted of this Service.  # noqa: E501


        :return: The deleted of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Service.


        :param deleted: The deleted of this Service.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Service.  # noqa: E501


        :return: The description of this Service.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Service.


        :param description: The description of this Service.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enumerability(self):
        """Gets the enumerability of this Service.  # noqa: E501


        :return: The enumerability of this Service.  # noqa: E501
        :rtype: int
        """
        return self._enumerability

    @enumerability.setter
    def enumerability(self, enumerability):
        """Sets the enumerability of this Service.


        :param enumerability: The enumerability of this Service.  # noqa: E501
        :type: int
        """

        self._enumerability = enumerability

    @property
    def first_seen(self):
        """Gets the first_seen of this Service.  # noqa: E501


        :return: The first_seen of this Service.  # noqa: E501
        :rtype: datetime
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this Service.


        :param first_seen: The first_seen of this Service.  # noqa: E501
        :type: datetime
        """

        self._first_seen = first_seen

    @property
    def id(self):
        """Gets the id of this Service.  # noqa: E501


        :return: The id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.


        :param id: The id of this Service.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instance_count(self):
        """Gets the instance_count of this Service.  # noqa: E501


        :return: The instance_count of this Service.  # noqa: E501
        :rtype: float
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this Service.


        :param instance_count: The instance_count of this Service.  # noqa: E501
        :type: float
        """

        self._instance_count = instance_count

    @property
    def ip_count(self):
        """Gets the ip_count of this Service.  # noqa: E501


        :return: The ip_count of this Service.  # noqa: E501
        :rtype: float
        """
        return self._ip_count

    @ip_count.setter
    def ip_count(self, ip_count):
        """Sets the ip_count of this Service.


        :param ip_count: The ip_count of this Service.  # noqa: E501
        :type: float
        """

        self._ip_count = ip_count

    @property
    def last_seen(self):
        """Gets the last_seen of this Service.  # noqa: E501


        :return: The last_seen of this Service.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this Service.


        :param last_seen: The last_seen of this Service.  # noqa: E501
        :type: datetime
        """

        self._last_seen = last_seen

    @property
    def lens_id(self):
        """Gets the lens_id of this Service.  # noqa: E501


        :return: The lens_id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._lens_id

    @lens_id.setter
    def lens_id(self, lens_id):
        """Sets the lens_id of this Service.


        :param lens_id: The lens_id of this Service.  # noqa: E501
        :type: str
        """

        self._lens_id = lens_id

    @property
    def lens_view(self):
        """Gets the lens_view of this Service.  # noqa: E501


        :return: The lens_view of this Service.  # noqa: E501
        :rtype: str
        """
        return self._lens_view

    @lens_view.setter
    def lens_view(self, lens_view):
        """Sets the lens_view of this Service.


        :param lens_view: The lens_view of this Service.  # noqa: E501
        :type: str
        """

        self._lens_view = lens_view

    @property
    def name(self):
        """Gets the name of this Service.  # noqa: E501


        :return: The name of this Service.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.


        :param name: The name of this Service.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this Service.  # noqa: E501


        :return: The org_id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Service.


        :param org_id: The org_id of this Service.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def perspective(self):
        """Gets the perspective of this Service.  # noqa: E501


        :return: The perspective of this Service.  # noqa: E501
        :rtype: str
        """
        return self._perspective

    @perspective.setter
    def perspective(self, perspective):
        """Sets the perspective of this Service.


        :param perspective: The perspective of this Service.  # noqa: E501
        :type: str
        """

        self._perspective = perspective

    @property
    def perspective_name(self):
        """Gets the perspective_name of this Service.  # noqa: E501


        :return: The perspective_name of this Service.  # noqa: E501
        :rtype: str
        """
        return self._perspective_name

    @perspective_name.setter
    def perspective_name(self, perspective_name):
        """Sets the perspective_name of this Service.


        :param perspective_name: The perspective_name of this Service.  # noqa: E501
        :type: str
        """

        self._perspective_name = perspective_name

    @property
    def post_exploit(self):
        """Gets the post_exploit of this Service.  # noqa: E501


        :return: The post_exploit of this Service.  # noqa: E501
        :rtype: int
        """
        return self._post_exploit

    @post_exploit.setter
    def post_exploit(self, post_exploit):
        """Sets the post_exploit of this Service.


        :param post_exploit: The post_exploit of this Service.  # noqa: E501
        :type: int
        """

        self._post_exploit = post_exploit

    @property
    def private_weakness(self):
        """Gets the private_weakness of this Service.  # noqa: E501


        :return: The private_weakness of this Service.  # noqa: E501
        :rtype: int
        """
        return self._private_weakness

    @private_weakness.setter
    def private_weakness(self, private_weakness):
        """Sets the private_weakness of this Service.


        :param private_weakness: The private_weakness of this Service.  # noqa: E501
        :type: int
        """

        self._private_weakness = private_weakness

    @property
    def public_weakness(self):
        """Gets the public_weakness of this Service.  # noqa: E501


        :return: The public_weakness of this Service.  # noqa: E501
        :rtype: int
        """
        return self._public_weakness

    @public_weakness.setter
    def public_weakness(self, public_weakness):
        """Sets the public_weakness of this Service.


        :param public_weakness: The public_weakness of this Service.  # noqa: E501
        :type: int
        """

        self._public_weakness = public_weakness

    @property
    def randori_notes(self):
        """Gets the randori_notes of this Service.  # noqa: E501


        :return: The randori_notes of this Service.  # noqa: E501
        :rtype: str
        """
        return self._randori_notes

    @randori_notes.setter
    def randori_notes(self, randori_notes):
        """Sets the randori_notes of this Service.


        :param randori_notes: The randori_notes of this Service.  # noqa: E501
        :type: str
        """

        self._randori_notes = randori_notes

    @property
    def reference(self):
        """Gets the reference of this Service.  # noqa: E501


        :return: The reference of this Service.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Service.


        :param reference: The reference of this Service.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def research(self):
        """Gets the research of this Service.  # noqa: E501


        :return: The research of this Service.  # noqa: E501
        :rtype: int
        """
        return self._research

    @research.setter
    def research(self, research):
        """Sets the research of this Service.


        :param research: The research of this Service.  # noqa: E501
        :type: int
        """

        self._research = research

    @property
    def service_id(self):
        """Gets the service_id of this Service.  # noqa: E501


        :return: The service_id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Service.


        :param service_id: The service_id of this Service.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def target_temptation(self):
        """Gets the target_temptation of this Service.  # noqa: E501


        :return: The target_temptation of this Service.  # noqa: E501
        :rtype: int
        """
        return self._target_temptation

    @target_temptation.setter
    def target_temptation(self, target_temptation):
        """Sets the target_temptation of this Service.


        :param target_temptation: The target_temptation of this Service.  # noqa: E501
        :type: int
        """

        self._target_temptation = target_temptation

    @property
    def vendor(self):
        """Gets the vendor of this Service.  # noqa: E501


        :return: The vendor of this Service.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Service.


        :param vendor: The vendor of this Service.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this Service.  # noqa: E501


        :return: The version of this Service.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Service.


        :param version: The version of this Service.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Service):
            return True

        return self.to_dict() != other.to_dict()
