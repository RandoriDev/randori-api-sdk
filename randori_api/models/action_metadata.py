# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class ActionMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action_id': 'str',
        'artifacts_status': 'str',
        'bart_id': 'str',
        'completed': 'datetime',
        'config_hash': 'str',
        'created': 'datetime',
        'description': 'str',
        'description_id': 'str',
        'display_name': 'str',
        'dst_email': 'list[str]',
        'dst_host': 'list[str]',
        'dst_ip': 'list[str]',
        'dst_mac': 'list[str]',
        'dst_network': 'list[str]',
        'dst_path': 'list[str]',
        'dst_port': 'list[str]',
        'id': 'str',
        'implant_id': 'str',
        'implant_nick': 'str',
        'implant_uid': 'str',
        'mitre_techniques': 'list[str]',
        'name': 'str',
        'org_id': 'str',
        'perspective_metadata': 'object',
        'result': 'str',
        'result_hash': 'str',
        'runbook_instance_id': 'str',
        'src_email': 'list[str]',
        'src_host': 'list[str]',
        'src_ip': 'list[str]',
        'src_mac': 'list[str]',
        'stability': 'int',
        'started': 'datetime',
        'stealth': 'int',
        'summary_sha': 'str',
        'template': 'str',
        'trigger': 'object',
        'updated': 'datetime'
    }

    attribute_map = {
        'action_id': 'action_id',
        'artifacts_status': 'artifacts_status',
        'bart_id': 'bart_id',
        'completed': 'completed',
        'config_hash': 'config_hash',
        'created': 'created',
        'description': 'description',
        'description_id': 'description_id',
        'display_name': 'display_name',
        'dst_email': 'dst_email',
        'dst_host': 'dst_host',
        'dst_ip': 'dst_ip',
        'dst_mac': 'dst_mac',
        'dst_network': 'dst_network',
        'dst_path': 'dst_path',
        'dst_port': 'dst_port',
        'id': 'id',
        'implant_id': 'implant_id',
        'implant_nick': 'implant_nick',
        'implant_uid': 'implant_uid',
        'mitre_techniques': 'mitre_techniques',
        'name': 'name',
        'org_id': 'org_id',
        'perspective_metadata': 'perspective_metadata',
        'result': 'result',
        'result_hash': 'result_hash',
        'runbook_instance_id': 'runbook_instance_id',
        'src_email': 'src_email',
        'src_host': 'src_host',
        'src_ip': 'src_ip',
        'src_mac': 'src_mac',
        'stability': 'stability',
        'started': 'started',
        'stealth': 'stealth',
        'summary_sha': 'summary_sha',
        'template': 'template',
        'trigger': 'trigger',
        'updated': 'updated'
    }

    def __init__(self, action_id=None, artifacts_status=None, bart_id=None, completed=None, config_hash=None, created=None, description=None, description_id=None, display_name=None, dst_email=None, dst_host=None, dst_ip=None, dst_mac=None, dst_network=None, dst_path=None, dst_port=None, id=None, implant_id=None, implant_nick=None, implant_uid=None, mitre_techniques=None, name=None, org_id=None, perspective_metadata=None, result=None, result_hash=None, runbook_instance_id=None, src_email=None, src_host=None, src_ip=None, src_mac=None, stability=None, started=None, stealth=None, summary_sha=None, template=None, trigger=None, updated=None, local_vars_configuration=None):  # noqa: E501
        """ActionMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action_id = None
        self._artifacts_status = None
        self._bart_id = None
        self._completed = None
        self._config_hash = None
        self._created = None
        self._description = None
        self._description_id = None
        self._display_name = None
        self._dst_email = None
        self._dst_host = None
        self._dst_ip = None
        self._dst_mac = None
        self._dst_network = None
        self._dst_path = None
        self._dst_port = None
        self._id = None
        self._implant_id = None
        self._implant_nick = None
        self._implant_uid = None
        self._mitre_techniques = None
        self._name = None
        self._org_id = None
        self._perspective_metadata = None
        self._result = None
        self._result_hash = None
        self._runbook_instance_id = None
        self._src_email = None
        self._src_host = None
        self._src_ip = None
        self._src_mac = None
        self._stability = None
        self._started = None
        self._stealth = None
        self._summary_sha = None
        self._template = None
        self._trigger = None
        self._updated = None
        self.discriminator = None

        self.action_id = action_id
        self.artifacts_status = artifacts_status
        self.bart_id = bart_id
        self.completed = completed
        self.config_hash = config_hash
        self.created = created
        self.description = description
        self.description_id = description_id
        self.display_name = display_name
        self.dst_email = dst_email
        self.dst_host = dst_host
        self.dst_ip = dst_ip
        self.dst_mac = dst_mac
        self.dst_network = dst_network
        self.dst_path = dst_path
        self.dst_port = dst_port
        self.id = id
        self.implant_id = implant_id
        self.implant_nick = implant_nick
        self.implant_uid = implant_uid
        self.mitre_techniques = mitre_techniques
        self.name = name
        self.org_id = org_id
        self.perspective_metadata = perspective_metadata
        self.result = result
        self.result_hash = result_hash
        self.runbook_instance_id = runbook_instance_id
        self.src_email = src_email
        self.src_host = src_host
        self.src_ip = src_ip
        self.src_mac = src_mac
        self.stability = stability
        self.started = started
        self.stealth = stealth
        self.summary_sha = summary_sha
        self.template = template
        self.trigger = trigger
        self.updated = updated

    @property
    def action_id(self):
        """Gets the action_id of this ActionMetadata.  # noqa: E501


        :return: The action_id of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ActionMetadata.


        :param action_id: The action_id of this ActionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action_id is None:  # noqa: E501
            raise ValueError("Invalid value for `action_id`, must not be `None`")  # noqa: E501

        self._action_id = action_id

    @property
    def artifacts_status(self):
        """Gets the artifacts_status of this ActionMetadata.  # noqa: E501


        :return: The artifacts_status of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._artifacts_status

    @artifacts_status.setter
    def artifacts_status(self, artifacts_status):
        """Sets the artifacts_status of this ActionMetadata.


        :param artifacts_status: The artifacts_status of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._artifacts_status = artifacts_status

    @property
    def bart_id(self):
        """Gets the bart_id of this ActionMetadata.  # noqa: E501


        :return: The bart_id of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._bart_id

    @bart_id.setter
    def bart_id(self, bart_id):
        """Sets the bart_id of this ActionMetadata.


        :param bart_id: The bart_id of this ActionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bart_id is None:  # noqa: E501
            raise ValueError("Invalid value for `bart_id`, must not be `None`")  # noqa: E501

        self._bart_id = bart_id

    @property
    def completed(self):
        """Gets the completed of this ActionMetadata.  # noqa: E501


        :return: The completed of this ActionMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this ActionMetadata.


        :param completed: The completed of this ActionMetadata.  # noqa: E501
        :type: datetime
        """

        self._completed = completed

    @property
    def config_hash(self):
        """Gets the config_hash of this ActionMetadata.  # noqa: E501


        :return: The config_hash of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._config_hash

    @config_hash.setter
    def config_hash(self, config_hash):
        """Sets the config_hash of this ActionMetadata.


        :param config_hash: The config_hash of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._config_hash = config_hash

    @property
    def created(self):
        """Gets the created of this ActionMetadata.  # noqa: E501


        :return: The created of this ActionMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ActionMetadata.


        :param created: The created of this ActionMetadata.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this ActionMetadata.  # noqa: E501


        :return: The description of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActionMetadata.


        :param description: The description of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_id(self):
        """Gets the description_id of this ActionMetadata.  # noqa: E501


        :return: The description_id of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description_id

    @description_id.setter
    def description_id(self, description_id):
        """Sets the description_id of this ActionMetadata.


        :param description_id: The description_id of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._description_id = description_id

    @property
    def display_name(self):
        """Gets the display_name of this ActionMetadata.  # noqa: E501


        :return: The display_name of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ActionMetadata.


        :param display_name: The display_name of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def dst_email(self):
        """Gets the dst_email of this ActionMetadata.  # noqa: E501


        :return: The dst_email of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_email

    @dst_email.setter
    def dst_email(self, dst_email):
        """Sets the dst_email of this ActionMetadata.


        :param dst_email: The dst_email of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._dst_email = dst_email

    @property
    def dst_host(self):
        """Gets the dst_host of this ActionMetadata.  # noqa: E501


        :return: The dst_host of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_host

    @dst_host.setter
    def dst_host(self, dst_host):
        """Sets the dst_host of this ActionMetadata.


        :param dst_host: The dst_host of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._dst_host = dst_host

    @property
    def dst_ip(self):
        """Gets the dst_ip of this ActionMetadata.  # noqa: E501


        :return: The dst_ip of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this ActionMetadata.


        :param dst_ip: The dst_ip of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._dst_ip = dst_ip

    @property
    def dst_mac(self):
        """Gets the dst_mac of this ActionMetadata.  # noqa: E501


        :return: The dst_mac of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_mac

    @dst_mac.setter
    def dst_mac(self, dst_mac):
        """Sets the dst_mac of this ActionMetadata.


        :param dst_mac: The dst_mac of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._dst_mac = dst_mac

    @property
    def dst_network(self):
        """Gets the dst_network of this ActionMetadata.  # noqa: E501


        :return: The dst_network of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_network

    @dst_network.setter
    def dst_network(self, dst_network):
        """Sets the dst_network of this ActionMetadata.


        :param dst_network: The dst_network of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._dst_network = dst_network

    @property
    def dst_path(self):
        """Gets the dst_path of this ActionMetadata.  # noqa: E501


        :return: The dst_path of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_path

    @dst_path.setter
    def dst_path(self, dst_path):
        """Sets the dst_path of this ActionMetadata.


        :param dst_path: The dst_path of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._dst_path = dst_path

    @property
    def dst_port(self):
        """Gets the dst_port of this ActionMetadata.  # noqa: E501


        :return: The dst_port of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this ActionMetadata.


        :param dst_port: The dst_port of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._dst_port = dst_port

    @property
    def id(self):
        """Gets the id of this ActionMetadata.  # noqa: E501


        :return: The id of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionMetadata.


        :param id: The id of this ActionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def implant_id(self):
        """Gets the implant_id of this ActionMetadata.  # noqa: E501


        :return: The implant_id of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._implant_id

    @implant_id.setter
    def implant_id(self, implant_id):
        """Sets the implant_id of this ActionMetadata.


        :param implant_id: The implant_id of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._implant_id = implant_id

    @property
    def implant_nick(self):
        """Gets the implant_nick of this ActionMetadata.  # noqa: E501


        :return: The implant_nick of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._implant_nick

    @implant_nick.setter
    def implant_nick(self, implant_nick):
        """Sets the implant_nick of this ActionMetadata.


        :param implant_nick: The implant_nick of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._implant_nick = implant_nick

    @property
    def implant_uid(self):
        """Gets the implant_uid of this ActionMetadata.  # noqa: E501


        :return: The implant_uid of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._implant_uid

    @implant_uid.setter
    def implant_uid(self, implant_uid):
        """Sets the implant_uid of this ActionMetadata.


        :param implant_uid: The implant_uid of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._implant_uid = implant_uid

    @property
    def mitre_techniques(self):
        """Gets the mitre_techniques of this ActionMetadata.  # noqa: E501


        :return: The mitre_techniques of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._mitre_techniques

    @mitre_techniques.setter
    def mitre_techniques(self, mitre_techniques):
        """Sets the mitre_techniques of this ActionMetadata.


        :param mitre_techniques: The mitre_techniques of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._mitre_techniques = mitre_techniques

    @property
    def name(self):
        """Gets the name of this ActionMetadata.  # noqa: E501


        :return: The name of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionMetadata.


        :param name: The name of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this ActionMetadata.  # noqa: E501


        :return: The org_id of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ActionMetadata.


        :param org_id: The org_id of this ActionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def perspective_metadata(self):
        """Gets the perspective_metadata of this ActionMetadata.  # noqa: E501


        :return: The perspective_metadata of this ActionMetadata.  # noqa: E501
        :rtype: object
        """
        return self._perspective_metadata

    @perspective_metadata.setter
    def perspective_metadata(self, perspective_metadata):
        """Sets the perspective_metadata of this ActionMetadata.


        :param perspective_metadata: The perspective_metadata of this ActionMetadata.  # noqa: E501
        :type: object
        """

        self._perspective_metadata = perspective_metadata

    @property
    def result(self):
        """Gets the result of this ActionMetadata.  # noqa: E501


        :return: The result of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ActionMetadata.


        :param result: The result of this ActionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and result is None:  # noqa: E501
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def result_hash(self):
        """Gets the result_hash of this ActionMetadata.  # noqa: E501


        :return: The result_hash of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._result_hash

    @result_hash.setter
    def result_hash(self, result_hash):
        """Sets the result_hash of this ActionMetadata.


        :param result_hash: The result_hash of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._result_hash = result_hash

    @property
    def runbook_instance_id(self):
        """Gets the runbook_instance_id of this ActionMetadata.  # noqa: E501


        :return: The runbook_instance_id of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._runbook_instance_id

    @runbook_instance_id.setter
    def runbook_instance_id(self, runbook_instance_id):
        """Sets the runbook_instance_id of this ActionMetadata.


        :param runbook_instance_id: The runbook_instance_id of this ActionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and runbook_instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `runbook_instance_id`, must not be `None`")  # noqa: E501

        self._runbook_instance_id = runbook_instance_id

    @property
    def src_email(self):
        """Gets the src_email of this ActionMetadata.  # noqa: E501


        :return: The src_email of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_email

    @src_email.setter
    def src_email(self, src_email):
        """Sets the src_email of this ActionMetadata.


        :param src_email: The src_email of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._src_email = src_email

    @property
    def src_host(self):
        """Gets the src_host of this ActionMetadata.  # noqa: E501


        :return: The src_host of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_host

    @src_host.setter
    def src_host(self, src_host):
        """Sets the src_host of this ActionMetadata.


        :param src_host: The src_host of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._src_host = src_host

    @property
    def src_ip(self):
        """Gets the src_ip of this ActionMetadata.  # noqa: E501


        :return: The src_ip of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this ActionMetadata.


        :param src_ip: The src_ip of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._src_ip = src_ip

    @property
    def src_mac(self):
        """Gets the src_mac of this ActionMetadata.  # noqa: E501


        :return: The src_mac of this ActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_mac

    @src_mac.setter
    def src_mac(self, src_mac):
        """Sets the src_mac of this ActionMetadata.


        :param src_mac: The src_mac of this ActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._src_mac = src_mac

    @property
    def stability(self):
        """Gets the stability of this ActionMetadata.  # noqa: E501


        :return: The stability of this ActionMetadata.  # noqa: E501
        :rtype: int
        """
        return self._stability

    @stability.setter
    def stability(self, stability):
        """Sets the stability of this ActionMetadata.


        :param stability: The stability of this ActionMetadata.  # noqa: E501
        :type: int
        """

        self._stability = stability

    @property
    def started(self):
        """Gets the started of this ActionMetadata.  # noqa: E501


        :return: The started of this ActionMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this ActionMetadata.


        :param started: The started of this ActionMetadata.  # noqa: E501
        :type: datetime
        """

        self._started = started

    @property
    def stealth(self):
        """Gets the stealth of this ActionMetadata.  # noqa: E501


        :return: The stealth of this ActionMetadata.  # noqa: E501
        :rtype: int
        """
        return self._stealth

    @stealth.setter
    def stealth(self, stealth):
        """Sets the stealth of this ActionMetadata.


        :param stealth: The stealth of this ActionMetadata.  # noqa: E501
        :type: int
        """

        self._stealth = stealth

    @property
    def summary_sha(self):
        """Gets the summary_sha of this ActionMetadata.  # noqa: E501


        :return: The summary_sha of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._summary_sha

    @summary_sha.setter
    def summary_sha(self, summary_sha):
        """Sets the summary_sha of this ActionMetadata.


        :param summary_sha: The summary_sha of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._summary_sha = summary_sha

    @property
    def template(self):
        """Gets the template of this ActionMetadata.  # noqa: E501


        :return: The template of this ActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ActionMetadata.


        :param template: The template of this ActionMetadata.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def trigger(self):
        """Gets the trigger of this ActionMetadata.  # noqa: E501


        :return: The trigger of this ActionMetadata.  # noqa: E501
        :rtype: object
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this ActionMetadata.


        :param trigger: The trigger of this ActionMetadata.  # noqa: E501
        :type: object
        """

        self._trigger = trigger

    @property
    def updated(self):
        """Gets the updated of this ActionMetadata.  # noqa: E501


        :return: The updated of this ActionMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ActionMetadata.


        :param updated: The updated of this ActionMetadata.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActionMetadata):
            return True

        return self.to_dict() != other.to_dict()
