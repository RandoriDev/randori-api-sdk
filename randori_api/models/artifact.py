# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class Artifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_type': 'float',
        'data_hash': 'str',
        'detection_criteria': 'object',
        'enriched_data': 'object',
        'first_seen': 'datetime',
        'id': 'str',
        'last_seen': 'datetime',
        'org_id': 'str',
        'src': 'str',
        'src_type': 'str',
        'work_type': 'str'
    }

    attribute_map = {
        'artifact_type': 'artifact_type',
        'data_hash': 'data_hash',
        'detection_criteria': 'detection_criteria',
        'enriched_data': 'enriched_data',
        'first_seen': 'first_seen',
        'id': 'id',
        'last_seen': 'last_seen',
        'org_id': 'org_id',
        'src': 'src',
        'src_type': 'src_type',
        'work_type': 'work_type'
    }

    def __init__(self, artifact_type=None, data_hash=None, detection_criteria=None, enriched_data=None, first_seen=None, id=None, last_seen=None, org_id=None, src=None, src_type=None, work_type=None, local_vars_configuration=None):  # noqa: E501
        """Artifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_type = None
        self._data_hash = None
        self._detection_criteria = None
        self._enriched_data = None
        self._first_seen = None
        self._id = None
        self._last_seen = None
        self._org_id = None
        self._src = None
        self._src_type = None
        self._work_type = None
        self.discriminator = None

        if artifact_type is not None:
            self.artifact_type = artifact_type
        if data_hash is not None:
            self.data_hash = data_hash
        if detection_criteria is not None:
            self.detection_criteria = detection_criteria
        if enriched_data is not None:
            self.enriched_data = enriched_data
        if first_seen is not None:
            self.first_seen = first_seen
        self.id = id
        if last_seen is not None:
            self.last_seen = last_seen
        self.org_id = org_id
        if src is not None:
            self.src = src
        if src_type is not None:
            self.src_type = src_type
        if work_type is not None:
            self.work_type = work_type

    @property
    def artifact_type(self):
        """Gets the artifact_type of this Artifact.  # noqa: E501


        :return: The artifact_type of this Artifact.  # noqa: E501
        :rtype: float
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this Artifact.


        :param artifact_type: The artifact_type of this Artifact.  # noqa: E501
        :type: float
        """

        self._artifact_type = artifact_type

    @property
    def data_hash(self):
        """Gets the data_hash of this Artifact.  # noqa: E501


        :return: The data_hash of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._data_hash

    @data_hash.setter
    def data_hash(self, data_hash):
        """Sets the data_hash of this Artifact.


        :param data_hash: The data_hash of this Artifact.  # noqa: E501
        :type: str
        """

        self._data_hash = data_hash

    @property
    def detection_criteria(self):
        """Gets the detection_criteria of this Artifact.  # noqa: E501


        :return: The detection_criteria of this Artifact.  # noqa: E501
        :rtype: object
        """
        return self._detection_criteria

    @detection_criteria.setter
    def detection_criteria(self, detection_criteria):
        """Sets the detection_criteria of this Artifact.


        :param detection_criteria: The detection_criteria of this Artifact.  # noqa: E501
        :type: object
        """

        self._detection_criteria = detection_criteria

    @property
    def enriched_data(self):
        """Gets the enriched_data of this Artifact.  # noqa: E501


        :return: The enriched_data of this Artifact.  # noqa: E501
        :rtype: object
        """
        return self._enriched_data

    @enriched_data.setter
    def enriched_data(self, enriched_data):
        """Sets the enriched_data of this Artifact.


        :param enriched_data: The enriched_data of this Artifact.  # noqa: E501
        :type: object
        """

        self._enriched_data = enriched_data

    @property
    def first_seen(self):
        """Gets the first_seen of this Artifact.  # noqa: E501


        :return: The first_seen of this Artifact.  # noqa: E501
        :rtype: datetime
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this Artifact.


        :param first_seen: The first_seen of this Artifact.  # noqa: E501
        :type: datetime
        """

        self._first_seen = first_seen

    @property
    def id(self):
        """Gets the id of this Artifact.  # noqa: E501


        :return: The id of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Artifact.


        :param id: The id of this Artifact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_seen(self):
        """Gets the last_seen of this Artifact.  # noqa: E501


        :return: The last_seen of this Artifact.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this Artifact.


        :param last_seen: The last_seen of this Artifact.  # noqa: E501
        :type: datetime
        """

        self._last_seen = last_seen

    @property
    def org_id(self):
        """Gets the org_id of this Artifact.  # noqa: E501


        :return: The org_id of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Artifact.


        :param org_id: The org_id of this Artifact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def src(self):
        """Gets the src of this Artifact.  # noqa: E501


        :return: The src of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this Artifact.


        :param src: The src of this Artifact.  # noqa: E501
        :type: str
        """

        self._src = src

    @property
    def src_type(self):
        """Gets the src_type of this Artifact.  # noqa: E501


        :return: The src_type of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._src_type

    @src_type.setter
    def src_type(self, src_type):
        """Sets the src_type of this Artifact.


        :param src_type: The src_type of this Artifact.  # noqa: E501
        :type: str
        """

        self._src_type = src_type

    @property
    def work_type(self):
        """Gets the work_type of this Artifact.  # noqa: E501


        :return: The work_type of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._work_type

    @work_type.setter
    def work_type(self, work_type):
        """Sets the work_type of this Artifact.


        :param work_type: The work_type of this Artifact.  # noqa: E501
        :type: str
        """

        self._work_type = work_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Artifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Artifact):
            return True

        return self.to_dict() != other.to_dict()
