# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from randori_api.configuration import Configuration


class Detection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'detection_criteria': 'object',
        'hostname_id': 'str',
        'id': 'str',
        'ip_id': 'str',
        'network_id': 'str',
        'org_id': 'str',
        'poc_id': 'str',
        'port_id': 'str'
    }

    attribute_map = {
        'detection_criteria': 'detection_criteria',
        'hostname_id': 'hostname_id',
        'id': 'id',
        'ip_id': 'ip_id',
        'network_id': 'network_id',
        'org_id': 'org_id',
        'poc_id': 'poc_id',
        'port_id': 'port_id'
    }

    def __init__(self, detection_criteria=None, hostname_id=None, id=None, ip_id=None, network_id=None, org_id=None, poc_id=None, port_id=None, local_vars_configuration=None):  # noqa: E501
        """Detection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._detection_criteria = None
        self._hostname_id = None
        self._id = None
        self._ip_id = None
        self._network_id = None
        self._org_id = None
        self._poc_id = None
        self._port_id = None
        self.discriminator = None

        if detection_criteria is not None:
            self.detection_criteria = detection_criteria
        if hostname_id is not None:
            self.hostname_id = hostname_id
        self.id = id
        if ip_id is not None:
            self.ip_id = ip_id
        if network_id is not None:
            self.network_id = network_id
        self.org_id = org_id
        if poc_id is not None:
            self.poc_id = poc_id
        if port_id is not None:
            self.port_id = port_id

    @property
    def detection_criteria(self):
        """Gets the detection_criteria of this Detection.  # noqa: E501


        :return: The detection_criteria of this Detection.  # noqa: E501
        :rtype: object
        """
        return self._detection_criteria

    @detection_criteria.setter
    def detection_criteria(self, detection_criteria):
        """Sets the detection_criteria of this Detection.


        :param detection_criteria: The detection_criteria of this Detection.  # noqa: E501
        :type: object
        """

        self._detection_criteria = detection_criteria

    @property
    def hostname_id(self):
        """Gets the hostname_id of this Detection.  # noqa: E501


        :return: The hostname_id of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._hostname_id

    @hostname_id.setter
    def hostname_id(self, hostname_id):
        """Sets the hostname_id of this Detection.


        :param hostname_id: The hostname_id of this Detection.  # noqa: E501
        :type: str
        """

        self._hostname_id = hostname_id

    @property
    def id(self):
        """Gets the id of this Detection.  # noqa: E501


        :return: The id of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Detection.


        :param id: The id of this Detection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ip_id(self):
        """Gets the ip_id of this Detection.  # noqa: E501


        :return: The ip_id of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._ip_id

    @ip_id.setter
    def ip_id(self, ip_id):
        """Sets the ip_id of this Detection.


        :param ip_id: The ip_id of this Detection.  # noqa: E501
        :type: str
        """

        self._ip_id = ip_id

    @property
    def network_id(self):
        """Gets the network_id of this Detection.  # noqa: E501


        :return: The network_id of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this Detection.


        :param network_id: The network_id of this Detection.  # noqa: E501
        :type: str
        """

        self._network_id = network_id

    @property
    def org_id(self):
        """Gets the org_id of this Detection.  # noqa: E501


        :return: The org_id of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Detection.


        :param org_id: The org_id of this Detection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def poc_id(self):
        """Gets the poc_id of this Detection.  # noqa: E501


        :return: The poc_id of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._poc_id

    @poc_id.setter
    def poc_id(self, poc_id):
        """Sets the poc_id of this Detection.


        :param poc_id: The poc_id of this Detection.  # noqa: E501
        :type: str
        """

        self._poc_id = poc_id

    @property
    def port_id(self):
        """Gets the port_id of this Detection.  # noqa: E501


        :return: The port_id of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._port_id

    @port_id.setter
    def port_id(self, port_id):
        """Sets the port_id of this Detection.


        :param port_id: The port_id of this Detection.  # noqa: E501
        :type: str
        """

        self._port_id = port_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Detection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Detection):
            return True

        return self.to_dict() != other.to_dict()
