# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.attack_implants_single_output import AttackImplantsSingleOutput

class TestAttackImplantsSingleOutput(unittest.TestCase):
    """AttackImplantsSingleOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AttackImplantsSingleOutput:
        """Test AttackImplantsSingleOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AttackImplantsSingleOutput`
        """
        model = AttackImplantsSingleOutput()
        if include_optional:
            return AttackImplantsSingleOutput(
                data = randori_api_sdk.models.attack_implants.attack-implants(
                    arch = '', 
                    bart_id = '', 
                    bits = 56, 
                    created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    host_ips = [
                        ''
                        ], 
                    hostnames = [
                        ''
                        ], 
                    id = '', 
                    last_checkin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    method = randori_api_sdk.models.method.method(), 
                    next_checkin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    nick = '', 
                    org_id = '', 
                    os = '', 
                    ostype = '', 
                    osver = '', 
                    status = '', 
                    uid = '', )
            )
        else:
            return AttackImplantsSingleOutput(
        )
        """

    def testAttackImplantsSingleOutput(self):
        """Test AttackImplantsSingleOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
