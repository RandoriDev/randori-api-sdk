# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import randori_api
from randori_api.models.saved_views import SavedViews  # noqa: E501
from randori_api.rest import ApiException

class TestSavedViews(unittest.TestCase):
    """SavedViews unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SavedViews
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = randori_api.models.saved_views.SavedViews()  # noqa: E501
        if include_optional :
            return SavedViews(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                description = '0', 
                edited_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                entity_type = 'target', 
                filter_data = randori_api.models.filter_data.filter_data(), 
                id = '0', 
                name = '0', 
                org_id = '0', 
                sort_data = randori_api.models.sort_data.sort_data()
            )
        else :
            return SavedViews(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                edited_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                entity_type = 'target',
                filter_data = randori_api.models.filter_data.filter_data(),
                org_id = '0',
                sort_data = randori_api.models.sort_data.sort_data(),
        )

    def testSavedViews(self):
        """Test SavedViews"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
