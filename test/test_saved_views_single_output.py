# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.saved_views_single_output import SavedViewsSingleOutput

class TestSavedViewsSingleOutput(unittest.TestCase):
    """SavedViewsSingleOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SavedViewsSingleOutput:
        """Test SavedViewsSingleOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SavedViewsSingleOutput`
        """
        model = SavedViewsSingleOutput()
        if include_optional:
            return SavedViewsSingleOutput(
                data = randori_api_sdk.models.saved_views.saved-views(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    description = '', 
                    edited_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    entity_type = 'target', 
                    filter_data = randori_api_sdk.models.filter_data.filter_data(), 
                    id = '', 
                    is_favorite = True, 
                    is_global = True, 
                    name = '', 
                    org_id = '', 
                    sort_data = randori_api_sdk.models.sort_data.sort_data(), )
            )
        else:
            return SavedViewsSingleOutput(
        )
        """

    def testSavedViewsSingleOutput(self):
        """Test SavedViewsSingleOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
