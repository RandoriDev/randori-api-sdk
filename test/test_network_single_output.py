# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.network_single_output import NetworkSingleOutput

class TestNetworkSingleOutput(unittest.TestCase):
    """NetworkSingleOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NetworkSingleOutput:
        """Test NetworkSingleOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NetworkSingleOutput`
        """
        model = NetworkSingleOutput()
        if include_optional:
            return NetworkSingleOutput(
                data = randori_api_sdk.models.network.network(
                    affiliation_state = 'None', 
                    authority = True, 
                    authority_distance = 56, 
                    authority_override = True, 
                    characteristic_tags = [
                        ''
                        ], 
                    confidence = 56, 
                    deleted = True, 
                    first_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    impact_score = 'None', 
                    ip_count = 1.337, 
                    last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    lens_id = '', 
                    lens_view = '', 
                    max_confidence = 56, 
                    network = '', 
                    network_str = '', 
                    only_in_review_targets = True, 
                    open_port_count = 56, 
                    org_id = '', 
                    perspective = '', 
                    perspective_name = '', 
                    priority_impact_factor = 1.337, 
                    priority_score = 1.337, 
                    priority_status_factor = 1.337, 
                    priority_tags_factor = 1.337, 
                    service_count = 1.337, 
                    status = 'None', 
                    target_count = 1.337, 
                    target_temptation = 56, 
                    user_tags = [
                        ''
                        ], )
            )
        else:
            return NetworkSingleOutput(
        )
        """

    def testNetworkSingleOutput(self):
        """Test NetworkSingleOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
