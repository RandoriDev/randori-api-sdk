# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.attack_runbook_get_output import AttackRunbookGetOutput

class TestAttackRunbookGetOutput(unittest.TestCase):
    """AttackRunbookGetOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AttackRunbookGetOutput:
        """Test AttackRunbookGetOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AttackRunbookGetOutput`
        """
        model = AttackRunbookGetOutput()
        if include_optional:
            return AttackRunbookGetOutput(
                count = 56,
                data = [
                    randori_api_sdk.models.attack_runbook.attack-runbook(
                        comment = '0', 
                        deleted = True, 
                        description = '', 
                        dst_email = [
                            ''
                            ], 
                        dst_host = [
                            ''
                            ], 
                        dst_ip = [
                            ''
                            ], 
                        dst_mac = [
                            ''
                            ], 
                        dst_misc = [
                            ''
                            ], 
                        dst_network = [
                            ''
                            ], 
                        dst_path = [
                            ''
                            ], 
                        dst_port = [
                            56
                            ], 
                        dst_search = '', 
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        guidance = '', 
                        id = '', 
                        implant_ids = [
                            ''
                            ], 
                        implant_nick = '', 
                        implant_src_host = [
                            ''
                            ], 
                        implant_src_ip = [
                            ''
                            ], 
                        instance_label = '', 
                        name = '', 
                        objective = '', 
                        org_id = '', 
                        perspective_metadata = [
                            None
                            ], 
                        randori_notes = '', 
                        results = '', 
                        runbook_id = '', 
                        src_email = [
                            ''
                            ], 
                        src_host = [
                            ''
                            ], 
                        src_ip = [
                            ''
                            ], 
                        src_mac = [
                            ''
                            ], 
                        src_misc = [
                            ''
                            ], 
                        src_search = '', 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = '', 
                        technique_ids = [
                            ''
                            ], 
                        trigger = [
                            None
                            ], 
                        uid = '', )
                    ],
                offset = 56,
                total = 56
            )
        else:
            return AttackRunbookGetOutput(
        )
        """

    def testAttackRunbookGetOutput(self):
        """Test AttackRunbookGetOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
