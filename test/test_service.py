# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.service import Service

class TestService(unittest.TestCase):
    """Service unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Service:
        """Test Service
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Service`
        """
        model = Service()
        if include_optional:
            return Service(
                applicability = 56,
                attack_note = '',
                confidence = 56,
                cpe = randori_api_sdk.models.cpe.cpe(),
                criticality = 56,
                deleted = True,
                description = '',
                description_source = 'default',
                enumerability = 56,
                exploitability = 56,
                first_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                instance_count = 1.337,
                ip_count = 1.337,
                last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                lens_id = '',
                lens_view = '',
                name = '',
                org_id = '',
                perspective = '',
                perspective_name = '',
                post_exploit = 56,
                private_weakness = 56,
                public_weakness = 56,
                randori_notes = '',
                reference = '',
                research = 56,
                service_id = '',
                target_temptation = 56,
                tech_category = [
                    'App Servers'
                    ],
                temptation_last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                vendor = '',
                version = ''
            )
        else:
            return Service(
                id = '',
                org_id = '',
        )
        """

    def testService(self):
        """Test Service"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
