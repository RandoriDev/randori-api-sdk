# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import randori_api
from randori_api.models.action_metadata_get_output import ActionMetadataGetOutput  # noqa: E501
from randori_api.rest import ApiException

class TestActionMetadataGetOutput(unittest.TestCase):
    """ActionMetadataGetOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ActionMetadataGetOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = randori_api.models.action_metadata_get_output.ActionMetadataGetOutput()  # noqa: E501
        if include_optional :
            return ActionMetadataGetOutput(
                count = 56, 
                data = [
                    randori_api.models.action_metadata.action-metadata(
                        action_id = '0', 
                        artifacts_status = '0', 
                        bart_id = '0', 
                        completed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        config_hash = '0', 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        description = '0', 
                        description_id = '0', 
                        display_name = '0', 
                        dst_email = [
                            '0'
                            ], 
                        dst_host = [
                            '0'
                            ], 
                        dst_ip = [
                            '0'
                            ], 
                        dst_mac = [
                            '0'
                            ], 
                        dst_network = [
                            '0'
                            ], 
                        dst_path = [
                            '0'
                            ], 
                        dst_port = [
                            '0'
                            ], 
                        id = '0', 
                        implant_id = '0', 
                        implant_nick = '0', 
                        implant_uid = '0', 
                        mitre_techniques = [
                            '0'
                            ], 
                        name = '0', 
                        org_id = '0', 
                        perspective_metadata = randori_api.models.perspective_metadata.perspective_metadata(), 
                        result = '0', 
                        result_hash = '0', 
                        runbook_instance_id = '0', 
                        src_email = [
                            '0'
                            ], 
                        src_host = [
                            '0'
                            ], 
                        src_ip = [
                            '0'
                            ], 
                        src_mac = [
                            '0'
                            ], 
                        stability = 56, 
                        started = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        stealth = 56, 
                        summary_sha = '0', 
                        template = '0', 
                        trigger = randori_api.models.trigger.trigger(), 
                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ], 
                offset = 56, 
                total = 56
            )
        else :
            return ActionMetadataGetOutput(
        )

    def testActionMetadataGetOutput(self):
        """Test ActionMetadataGetOutput"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
