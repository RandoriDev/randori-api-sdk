# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.target_patch_input import TargetPatchInput

class TestTargetPatchInput(unittest.TestCase):
    """TargetPatchInput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TargetPatchInput:
        """Test TargetPatchInput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TargetPatchInput`
        """
        model = TargetPatchInput()
        if include_optional:
            return TargetPatchInput(
                data = randori_api_sdk.models.target_patch_in.target-patch-in(
                    affiliation_state = 'None', 
                    authorization_state = 'Authorized', 
                    impact_score = 'None', 
                    status = 'None', ),
                operations = [
                    null
                    ],
                q = randori_api_sdk.models.querybuilder_rule_group_schema.querybuilder-rule-group-schema(
                    condition = 'AND', 
                    label = '', 
                    rules = [
                        randori_api_sdk.models.querybuilder_group_member_schema.querybuilder-group-member-schema()
                        ], 
                    ui_id = '', )
            )
        else:
            return TargetPatchInput(
        )
        """

    def testTargetPatchInput(self):
        """Test TargetPatchInput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
