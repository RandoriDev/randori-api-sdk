# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.mitre_technique import MitreTechnique

class TestMitreTechnique(unittest.TestCase):
    """MitreTechnique unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MitreTechnique:
        """Test MitreTechnique
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MitreTechnique`
        """
        model = MitreTechnique()
        if include_optional:
            return MitreTechnique(
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by_ref = '',
                description = '',
                external_references = [
                    None
                    ],
                id = '',
                kill_chain_phases = [
                    None
                    ],
                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                object_marking_refs = [
                    ''
                    ],
                revoked = True,
                type = '',
                x_mitre_attack_spec_version = '',
                x_mitre_data_sources = [
                    ''
                    ],
                x_mitre_deprecated = True,
                x_mitre_detection = '',
                x_mitre_domains = [
                    ''
                    ],
                x_mitre_is_subtechnique = True,
                x_mitre_modified_by_ref = '',
                x_mitre_permissions_required = [
                    ''
                    ],
                x_mitre_platforms = [
                    ''
                    ],
                x_mitre_version = 1.337
            )
        else:
            return MitreTechnique(
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by_ref = '',
                description = '',
                external_references = [
                    None
                    ],
                id = '',
                kill_chain_phases = [
                    None
                    ],
                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                object_marking_refs = [
                    ''
                    ],
                revoked = True,
                type = '',
                x_mitre_detection = '',
                x_mitre_domains = [
                    ''
                    ],
                x_mitre_is_subtechnique = True,
                x_mitre_modified_by_ref = '',
                x_mitre_platforms = [
                    ''
                    ],
                x_mitre_version = 1.337,
        )
        """

    def testMitreTechnique(self):
        """Test MitreTechnique"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
