# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.action_metadata_single_output import ActionMetadataSingleOutput

class TestActionMetadataSingleOutput(unittest.TestCase):
    """ActionMetadataSingleOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ActionMetadataSingleOutput:
        """Test ActionMetadataSingleOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ActionMetadataSingleOutput`
        """
        model = ActionMetadataSingleOutput()
        if include_optional:
            return ActionMetadataSingleOutput(
                data = randori_api_sdk.models.action_metadata.action-metadata(
                    action_id = '', 
                    artifacts_status = '', 
                    bart_id = '', 
                    completed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    config_hash = '', 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted = True, 
                    description = '', 
                    description_id = '', 
                    display_name = '', 
                    dst_email = [
                        ''
                        ], 
                    dst_host = [
                        ''
                        ], 
                    dst_ip = [
                        ''
                        ], 
                    dst_mac = [
                        ''
                        ], 
                    dst_misc = [
                        ''
                        ], 
                    dst_network = [
                        ''
                        ], 
                    dst_path = [
                        ''
                        ], 
                    dst_port = [
                        56
                        ], 
                    id = '', 
                    implant_id = '', 
                    implant_nick = '', 
                    implant_uid = '', 
                    mitre_techniques = [
                        ''
                        ], 
                    name = '', 
                    org_id = '', 
                    perspective_metadata = randori_api_sdk.models.perspective_metadata.perspective_metadata(), 
                    randori_notes = '', 
                    result = '', 
                    result_hash = '', 
                    runbook_instance_id = '', 
                    src_email = [
                        ''
                        ], 
                    src_host = [
                        ''
                        ], 
                    src_ip = [
                        ''
                        ], 
                    src_mac = [
                        ''
                        ], 
                    src_misc = [
                        ''
                        ], 
                    stability = 56, 
                    started = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    stealth = 56, 
                    summary_sha = '', 
                    template = '', 
                    trigger = randori_api_sdk.models.trigger.trigger(), 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return ActionMetadataSingleOutput(
        )
        """

    def testActionMetadataSingleOutput(self):
        """Test ActionMetadataSingleOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
