# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.action_metadata import ActionMetadata

class TestActionMetadata(unittest.TestCase):
    """ActionMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ActionMetadata:
        """Test ActionMetadata
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ActionMetadata`
        """
        model = ActionMetadata()
        if include_optional:
            return ActionMetadata(
                action_id = '',
                artifacts_status = '',
                bart_id = '',
                completed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                config_hash = '',
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                deleted = True,
                description = '',
                description_id = '',
                display_name = '',
                dst_email = [
                    ''
                    ],
                dst_host = [
                    ''
                    ],
                dst_ip = [
                    ''
                    ],
                dst_mac = [
                    ''
                    ],
                dst_misc = [
                    ''
                    ],
                dst_network = [
                    ''
                    ],
                dst_path = [
                    ''
                    ],
                dst_port = [
                    56
                    ],
                id = '',
                implant_id = '',
                implant_nick = '',
                implant_uid = '',
                mitre_techniques = [
                    ''
                    ],
                name = '',
                org_id = '',
                perspective_metadata = randori_api_sdk.models.perspective_metadata.perspective_metadata(),
                randori_notes = '',
                result = '',
                result_hash = '',
                runbook_instance_id = '',
                src_email = [
                    ''
                    ],
                src_host = [
                    ''
                    ],
                src_ip = [
                    ''
                    ],
                src_mac = [
                    ''
                    ],
                src_misc = [
                    ''
                    ],
                stability = 56,
                started = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                stealth = 56,
                summary_sha = '',
                template = '',
                trigger = randori_api_sdk.models.trigger.trigger(),
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ActionMetadata(
                action_id = '',
                bart_id = '',
                id = '',
                org_id = '',
                result = '',
                runbook_instance_id = '',
        )
        """

    def testActionMetadata(self):
        """Test ActionMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
