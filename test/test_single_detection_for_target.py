# coding: utf-8

"""
    Randori API

    Endpoints accessible using API tokens

    The version of the OpenAPI document: 1.0
    Contact: support@randori.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from randori_api_sdk.models.single_detection_for_target import SingleDetectionForTarget

class TestSingleDetectionForTarget(unittest.TestCase):
    """SingleDetectionForTarget unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SingleDetectionForTarget:
        """Test SingleDetectionForTarget
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SingleDetectionForTarget`
        """
        model = SingleDetectionForTarget()
        if include_optional:
            return SingleDetectionForTarget(
                affiliation_state = 'None',
                applicability = 56,
                attack_note = '',
                authority = True,
                authority_distance = 56,
                authority_override = True,
                authorization_state = 'Authorized',
                authorizing_policies = [
                    ''
                    ],
                banners_uuid = '',
                cert_uuid = '',
                characteristic_tags = [
                    ''
                    ],
                characteristics_count = 56,
                confidence = 56,
                cpe = randori_api_sdk.models.cpe.cpe(),
                criticality = 56,
                deleted = True,
                description = '',
                description_source = 'default',
                detection_authorization_state = 'Authorized',
                detection_criteria = randori_api_sdk.models.detection_criteria.detection_criteria(),
                detection_relevance = 56,
                detection_uuid = '',
                enumerability = 56,
                exploitability = 56,
                first_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                headers_uuid = '',
                hostname = '',
                hostname_id = '',
                id = '',
                impact_score = 'None',
                ip = '',
                ip_id = '',
                ip_str = '',
                last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                lens_id = '',
                lens_view = '',
                name = '',
                org_id = '',
                path = '',
                perspective = '',
                perspective_name = '',
                poc_email = '',
                poc_id = '',
                port = 56,
                post_exploit = 56,
                priority_impact_factor = 1.337,
                priority_score = 1.337,
                priority_status_factor = 1.337,
                priority_tags_factor = 1.337,
                private_weakness = 56,
                protocol = '',
                public_weakness = 56,
                randori_notes = '',
                reference = '',
                research = 56,
                screenshot_uuid = '',
                service_id = '',
                status = 'None',
                target_confidence = 56,
                target_first_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                target_id = '',
                target_last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                target_num_authorized_detections = 56,
                target_num_detections = 56,
                target_temptation = 56,
                tech_category = [
                    'App Servers'
                    ],
                temptation_last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                thumbnail_uuid = '',
                user_tags = [
                    ''
                    ],
                validated_vulnerabilities_detection = [
                    ''
                    ],
                validated_vulnerabilities_detection_count = 56,
                validated_vulnerabilities_target = [
                    ''
                    ],
                validated_vulnerabilities_target_count = 56,
                vendor = '',
                version = ''
            )
        else:
            return SingleDetectionForTarget(
                id = '',
                org_id = '',
        )
        """

    def testSingleDetectionForTarget(self):
        """Test SingleDetectionForTarget"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
